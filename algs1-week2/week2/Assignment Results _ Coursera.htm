<!DOCTYPE html>
<html class="supports-svg" xmlns:fb="http://ogp.me/ns/fb#" itemtype="http://schema.org"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=IE7"><meta name="fragment" content="!"><meta name="robots" content="NOODP"><meta charset="utf-8"><meta property="og:title" content="Coursera"><meta property="og:type" content="website"><meta property="og:image" content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png"><meta property="og:url" content="https://www.coursera.org/assignment/part_results?part_id=4"><meta property="og:site_name" content="Coursera"><meta property="og:locale" content="en_US"><meta property="og:description" content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits."><meta property="fb:admins" content="727836538,4807654"><meta property="fb:app_id" content="274998519252278"><meta name="twitter:site" content="Coursera"><meta name="twitter:app:name:iphone" content="Coursera"><meta name="twitter:app:name:ipad" content="Coursera"><meta name="twitter:app:name:googleplay" content="Coursera"><meta name="twitter:app:id:iphone" content="id736535961"><meta name="twitter:app:id:ipad" content="id736535961"><meta name="twitter:app:id:googleplay" content="org.coursera.android"><meta name="description" content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits."><meta name="image" content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png"><meta name="apple-itunes-app" content="app-id=736535961"><title>Assignment Results | Coursera</title>    <link href="Assignment%20Results%20_%20Coursera_files/spark.css" rel="stylesheet" type="text/css">
      <link href="Assignment%20Results%20_%20Coursera_files/course.css" rel="stylesheet" type="text/css">
    <link href="https://spark-public.s3.amazonaws.com/algs4partI/static/images/favicon.ico" rel="icon">
<script src="Assignment%20Results%20_%20Coursera_files/ga.js" async="" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/routes.js" data-requiremodule="pages/spark/routes" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><meta content="summary" name="twitter:card"><meta content="Coursera" name="twitter:title"><meta content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits." name="twitter:description"><meta content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png" name="twitter:image:src"><script src="Assignment%20Results%20_%20Coursera_files/204.js" data-requiremodule="js/lib/204" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/400.js" data-requiremodule="js/lib/400" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/student-page_003.js" data-requiremodule="pages/spark/views/template/student-page" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/student-page_002.js" data-requiremodule="pages/spark/views/template/student-page.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/sparkSurveyQuestionsSessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/sparkSurveyQuestions/sparkSurveyQuestionsSessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/sessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/quickQuestions/sessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/student-page.js" data-requiremodule="pages/spark/views/template/nls/student-page" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/SessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/SessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/QuestionCollection.js" data-requiremodule="bundles/assess/framework/QuestionCollection" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/QuestionModel.js" data-requiremodule="bundles/assess/framework/QuestionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/backbone.js" data-requiremodule="bundles/assess/lib/backbone.hascollections" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/underscore.js" data-requiremodule="js/lib/underscore.extend" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/header_003.js" data-requiremodule="pages/spark/views/template/header" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/sidebar_002.js" data-requiremodule="pages/spark/views/template/sidebar" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/readme.js" data-requiremodule="js/lib/readme" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/header_002.js" data-requiremodule="pages/spark/views/template/header.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/assessApi.js" data-requiremodule="pages/spark-survey/assessApi" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/sidebar.js" data-requiremodule="pages/spark/views/template/sidebar.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/signature_track.js" data-requiremodule="spark/app/signature/js/signature_track" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/HelpCenterLinks.js" data-requiremodule="pages/help-center/data/HelpCenterLinks" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/header.js" data-requiremodule="pages/spark/views/template/nls/header" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/sidebar_003.js" data-requiremodule="pages/spark/views/template/nls/sidebar" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/jade.js" data-requiremodule="js/vendor/jade" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/signatureTrackLastChanceModal.js" data-requiremodule="spark/app/signature/js/signatureTrackLastChanceModal.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/flexjoinLastChanceModal.js" data-requiremodule="spark/app/signature/js/flexjoinLastChanceModal.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/util.js" data-requiremodule="js/lib/util" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/path.js" data-requiremodule="js/lib/path" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script></head><body><div id="fb-root"></div><div id="spark-help" class="hide"></div><a href="http://help.coursera.org/customer/widget/emails/new" target="_blank"><div style="z-index: 1" data-networkprioritysupportwidget="" role="button" class="helpwidget-tab hide">Premium Support</div></a><div id="origami"><div><div><div class="coursera-page"><div class="coursera-header" role="menubar"><div class="hidden">This page features MathJax technology to render mathematical formulae.
If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.</div><h1 class="hidden">Algorithms, Part I</h1><!-- UNTIL dashboard announcement expires 2014-08-31 (then delete this code)--><div role="banner" class="course-topbar container-fluid"><div class="row-fluid"><div class="span3"><a href="https://www.coursera.org/" data-if-linkable="add-referrer" class="course-topbar-logo"></a></div><div style="float:right;" class="course-topbar-nav-container span9"><h2 class="hidden">Top Navigation Bar</h2><ul class="course-topbar-nav-list"><li class="course-topbar-nav-list-item"><a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a></li><li tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="data-popup-close" style="cursor:pointer;" data-popup-direction="se" class="course-topbar-nav-list-item"><a data-user-id="1350958">Sudarshan S<i class="icon-caret-down"></i></a></li></ul></div></div><div id="course-topbar-aboutus" class="course-topbar-sublist"><a href="https://www.coursera.org//about/" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">About Us</a><a href="https://www.coursera.org//about/careers" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">Careers</a><a href="https://www.coursera.org//about/people" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">People</a><a href="https://www.coursera.org//about/contact" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">Contact Us</a></div><div id="course-topbar-my" class="course-topbar-sublist"><a data-popup-close="data-popup-close" href="https://www.coursera.org/" target="_new" class="course-topbar-sublist-item">My Courses</a><a data-popup-close="data-popup-close" href="https://www.coursera.org/account/profile" target="_new" class="course-topbar-sublist-item">Profile</a><a data-popup-close="data-popup-close" href="https://www.coursera.org/account/records" target="_new" class="course-topbar-sublist-item">Course Records</a><a href="https://www.coursera.org/account/settings" target="_new" class="course-topbar-sublist-item">Settings</a><a href="https://class.coursera.org/algs4partI-006/class/preferences" class="course-topbar-sublist-item">Course Preferences</a><a href="https://class.coursera.org/algs4partI-006/auth/logout" class="course-topbar-sublist-item">Sign Out</a></div></div><div class="course-topbanner-wrapper"><div class="course-topbanner"><div class="course-topbanner-university-logo"><a href="https://www.coursera.org/princeton" target="_blank" data-if-linkable="add-referrer" title="https://www.coursera.org/princeton" class="coursera-university-color"><img src="Assignment%20Results%20_%20Coursera_files/university_logo.png" alt="princeton"></a></div><h1 class="course-topbanner-header"><a href="https://class.coursera.org/algs4partI-006/" data-if-linkable="modal-lock" class="course-topbanner-name coursera-university-color">Algorithms, Part I</a><br><span style="" class="course-topbanner-instructor">by Kevin Wayne, Robert Sedgewick</span></h1></div></div></div><div style="position:relative;" class="container-fluid"><div class="row-fluid"><div id="course-page-sidebar" role="navigation"><div class="coursera-sidebar" role="menubar"><div id="course-page-sidebar" role="navigation"><div class="course-navbar-container"><a href="https://class.coursera.org/algs4partI-006" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_index"><img src="Assignment%20Results%20_%20Coursera_files/logo.png" style="width: 205px;height: 116px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.05);" alt="Course Home Page"></a><div data-coursera-course-search-nav-widget="data-coursera-course-search-nav-widget" class="input-append course-search-nav-box"><form method="get" action="/algs4partI-006/class/search" data-js-search-form="data-js-search-form" class="form-inline minimized-search"><label for="course-search-nav-input" class="accessible-text-for-reader">Search this course</label><input id="course-search-nav-input" name="q" data-js-search-input="data-js-search-input" type="text">&nbsp;<button type="submit" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="search" class="btn icon-search"><span class="accessible-text-for-reader">Search</span></button></form></div><h2 class="hidden">Side Navigation Bar</h2><ul class="course-navbar-list"><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/class/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Home" class="coursera-university-color"><span>Home </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/wiki/view?page=syllabus" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Syllabus" class="coursera-university-color"><span>Syllabus </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/wiki/view?page=schedule" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Schedule" class="coursera-university-color"><span>Schedule </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Lectures" class="coursera-university-color"><span>Lectures </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Exercises" class="coursera-university-color"><span>Exercises </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/assignment/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Programming_Assignments" class="coursera-university-color"><span>Programming Assignments </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/quiz/index?quiz_type=homework" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Job_Interview_Questions" class="coursera-university-color"><span>Job Interview Questions </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/forum/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Discussion_Forums" class="coursera-university-color"><span>Discussion Forums </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/wiki/view?page=ScheduleGoogleHangouts" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Google+_Hangouts" class="coursera-university-color"><span>Google+ Hangouts </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/wiki/view?page=errata" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Errata" class="coursera-university-color"><span>Errata </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/quiz/index?quiz_type=survey" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Surveys" class="coursera-university-color"><span>Surveys </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="http://algs4.cs.princeton.edu/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Booksite" class="coursera-university-color"><span>Booksite </span><span class="icon-share"></span><span class="accessible-text-for-reader">opens in new browser tab</span></a></li><li class="course-navbar-item"><a href="http://www.meetup.com/Coursera/" target="_blank" class="coursera-university-color">Join a Meetup<span class="icon-share"></span><span class="accessible-text-for-reader">opens in new browser tab</span></a></li></ul><ul style="list-style-type:none;margin-left: 10px;"><li><a href="http://help.coursera.org/" target="_blank" title="Open help articles in new window" class="coursera-university-color"><i class="icon-question-sign"></i>Help Articles</a></li></ul><ul style="list-style-type:none;margin-left: 10px;"><li><a href="https://class.coursera.org/algs4partI-006/forum/list?forum_id=10000&amp;url=https%3A%2F%2Fclass.coursera.org%2Falgs4partI-006%2Fassignment%2Fpart_results%3Fpart_id%3D4" class="coursera-university-color"><i class="icon-comments"></i>Course Materials Errors</a></li><li><a href="https://class.coursera.org/algs4partI-006/forum/list?forum_id=10001&amp;url=https%3A%2F%2Fclass.coursera.org%2Falgs4partI-006%2Fassignment%2Fpart_results%3Fpart_id%3D4" class="coursera-university-color"><i class="icon-comments"></i>Technical Issues</a></li></ul></div></div></div></div><div id="course-page-content" role="main"><div style="display: block;" id="spark" class="hide"><h2 class="course-page-header">Programming Assignment 2:  Randomized Queues and Deques | queues.zip
  <a class="coursera-reporter-link" title="Click here if you're experiencing technical problems or found errors in the course materials." target="_blank" href="https://class.coursera.org/algs4partI-006/help/programming?url=https%3A%2F%2Fclass.coursera.org%2Falgs4partI-006%2Fassignment%2Fpart_results%3Fpart_id%3D4">
     Help
  </a>
</h2>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-04-Oct 21:36:55</td></tr>
        <tr><td>Raw Score</td><td>95.31 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#099900">33/35 tests passed</font>
Memory:       <font color="#109900">46/51 tests passed</font>
Timing:       <font color="#009900">24/24 tests passed</font>

Raw score: <font color="#079900">95.31%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 3.5K Oct  5 04:32 Deque.java
-rw-r--r-- 1 3.7K Oct  5 04:32 RandomizedQueue.java
-rw-r--r-- 1  451 Oct  5 04:32 Subset.java
-rw-r--r-- 1 2.7K Oct  5 04:32 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Deque.java
*-----------------------------------------------------------
================================================================

% javac RandomizedQueue.java
*-----------------------------------------------------------
================================================================

% javac Subset.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Deque.java:1:1: Outer types defined is 2 (max allowed is 1).
Deque.java:88:23: The warning 'unchecked' cannot be suppressed at this location.
RandomizedQueue.java:1:1: Outer types defined is 2 (max allowed is 1).
RandomizedQueue.java:21:23: The warning 'unchecked' cannot be suppressed at this location.
RandomizedQueue.java:42:27: The warning 'unchecked' cannot be suppressed at this location.
RandomizedQueue.java:108:23: The warning 'unchecked' cannot be suppressed at this location.
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Subset:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Deque
*-----------------------------------------------------------
Running 15 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(), and
removeLast(). The probabilities of each operation are p1, p2, p3, and p4,
respectively.

Test 1: Calls to addFirst() and addLast() only
  *     5 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *    50 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *   500 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *  1000 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
==&gt; passed

Test 2: Calls to addFirst() and removeFirst()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 3: Calls to addFirst() and removeLast()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 4: Calls to addLast() and removeLast()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 5: Calls to addLast() and removeFirst()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 6: Calls to addFirst(), addLast(), removeFirst(), and removeLast()
  *     5 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *    50 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *   500 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *  1000 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
==&gt; passed

Test 7: Removing from an empty deque
  *  removeFirst()
  *  removeLast()
==&gt; passed

Test 8: Create multiple deque objects at the same time
==&gt; passed

Test 9: Check iterator() after calls only to addFirst()
==&gt; passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(),
         removeFirst(), and removeLast()
==&gt; passed

Test 11: Create two independent iterators to same deque
==&gt; passed

Test 12: Create Deque objects of different parameterized types
==&gt; passed

Test 13: Check that addFirst() and addLast() each throw a NullPointerException
         when inserting null items
==&gt; passed

Test 14: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 15: Check iterator() when Deque is empty
==&gt; passed


Total: 15/15 tests passed!

================================================================

Testing methods in RandomizedQueue
*-----------------------------------------------------------
Running 17 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), and sample().
The probabilities of each operation are p1, p2, and p3, respectively.

Test 1: Calls to enqueue() (and dequeue() just to verify)
  *     5 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *    50 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *   500 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *  1000 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
==&gt; passed

Test 2: Calls to enqueue() and dequeue()
  *     5 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
==&gt; passed

Test 3: Calls to enqueue() and sample()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
==&gt; passed

Test 4: Calls to enqueue(), dequeue(), and sample()
  *     5 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *    50 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *   500 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *  1000 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
==&gt; passed

Test 5: dequeue() and sample() from an empty randomized queue
  *  dequeue()
  *  sample()
==&gt; passed

Test 6: Create multiple randomized queue objects at the same time
==&gt; passed

Test 7: Check that iterator() returns correct items after a sequence of
         enqueue() operations
==&gt; passed

Test 8: Check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
==&gt; passed

Test 9: Create two independent iterators to same randomized queue
  *  N = 10
  *  N = 1000
==&gt; passed

Test 10: Create two iterators to different randomized queues
==&gt; passed

Test 11: Create RandomizedQueue objects of different parameterized types
==&gt; passed

Test 12: Check randomness of sample() by enqueueing strings, repeatedly calling
         sample(), and counting the frequency of each value.
  *  Enqueue strings A to C and sampling 3000 times
  *  Enqueue strings A to E and sampling 5000 times
  *  Enqueue strings A to H and sampling 8000 times
  *  Enqueue strings A to J and sampling 10000 times
==&gt; passed

Test 13: Check randomness of dequeue() by enqueueing strings, repeatedly calling
         dequeue() until a specific enqueued string appears.
  *  Enqueue strings A to C and call dequeue() until B is dequeued; repeat 3000 times

                            1     2     3 
                        -----------------
     observed frequency  1577  1423     0   3000
     expected frequency  1000  1000  1000   3000

     chi-squared = 1511.86 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to E and call dequeue() until A is dequeued; repeat 5000 times

                            1     2     3     4     5 
                        -----------------------------
     observed frequency  1235  1226  1210     0  1329   5000
     expected frequency  1000  1000  1000  1000  1000   5000

     chi-squared = 1258.64 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to H and call dequeue() until E is dequeued; repeat 8000 times

                            1     2     3     4     5     6     7     8 
                        -----------------------------------------------
     observed frequency  1143  1190  1133     0  1147  1185  1108  1094   8000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000   8000

     chi-squared = 1150.57 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to J and call dequeue() until B is dequeued; repeat 10000 times

                            1     2     3     4     5     6     7     8     9    10 
                        -----------------------------------------------------------
     observed frequency  1099  1051  1154  1151  1101  1077  1116  1110  1141     0   10000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000  1000  1000   10000

     chi-squared = 1120.49 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 14: Check randomness of iterator() by enqueueing strings, getting an iterator()
         and repeatedly calling next() until a specific enqueued string appears.
  *  Enqueue strings A to C, create iterator(), and call next() until A is returned;
     Repeat 3000 times
  *  Enqueue strings A to E, create iterator(), and call next() until C is returned;
     Repeat 5000 times
  *  Enqueue strings A to H, create iterator(), and call next() until H is returned;
     Repeat 8000 times
  *  Enqueue strings A to J, create iterator(), and call next() until D is returned;
     Repeat 10000 times
==&gt; passed

Test 15: Check that NullPointerException is thrown when inserting null items
==&gt; passed

Test 16: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 17: Check iterator() when RandomizedQueue is empty
==&gt; passed


Total: 16/17 tests passed!

================================================================

Testing methods in Subset
*-----------------------------------------------------------
Running 3 total tests.

Test 1: assignment inputs

% echo "A B C D E F G H I" | java Subset 3
[student solution]
A
G
D

% echo "A B C D E F G H I" | java Subset 3
[student solution]
E
A
H

% echo "AA BB BB BB BB BB CC CC " | java Subset 8
[student solution]
AA
BB
CC
BB
BB
BB
BB
CC

==&gt; passed

Test 2: various inputs

% echo "A B C D E F G H I" | java Subset 1
[student solution]
H

% echo "A B C D E F G H I" | java Subset 5
[student solution]
A
I
H
C
B

% echo "A B C D E F G H I" | java Subset 5
[student solution]
G
D
H
C
F

% echo "A B C D E F G H I" | java Subset 9
[student solution]
F
C
A
H
B
E
D
I
G

% echo "A B C D E F G H I" | java Subset 0
[student solution]

% echo "it was the best of times it was the worst of times" | java Subset 10
[student solution]
of
times
of
it
worst
the
was
the
times
best

% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 10
[student solution]
a
duty
way
counting
I
much
an
in,
things
forest,

% echo "AA BB BB BB BB BB CC CC " | java Subset 7
[student solution]
BB
BB
AA
BB
CC
BB
BB

==&gt; passed

Test 3: check that subsets are uniformly random
  * 1000 subsets of size 1 from subset10.txt

                            A     B     C     D     E     F     G     H     I     J 
                        -----------------------------------------------------------
     observed frequency   106   118   120   121   108   112   117    98   100     0   1000
     expected frequency   100   100   100   100   100   100   100   100   100   100   1000

     chi-squared = 117.02 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 250 subsets of size 4 from subset10.txt
  * 600 subsets of size 1 from subset6.txt

                            A     B     C     D     E     F 
                        -----------------------------------
     observed frequency   116   124   122   118   120     0   600
     expected frequency   100   100   100   100   100   100   600

     chi-squared = 120.40 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 300 subsets of size 2 from subset6.txt

                            A     B     C     D     E     F 
                        -----------------------------------
     observed frequency    99   106   133   122    66    74   600
     expected frequency   100   100   100   100   100   100   600

     chi-squared = 34.42 (p-value = 0.000002, reject if p-value &lt;= 0.0001)

  * 800 subsets of size 1 from subset8.txt
  * 160 subsets of size 5 from subset8.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Total: 2/3 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
Running 27 total tests.

Test 1a-1e: Total memory usage after inserting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          392         
=&gt; passed       64         2632         
=&gt; passed      256        10312         
=&gt; passed     1024        41032         
=&gt; passed     4096       163912         
==&gt; 5/5 tests passed

Memory: 40.00 N + 72.00  (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          432         
=&gt; passed       64         2672         
=&gt; passed      256        10352         
=&gt; passed     1024        41072         
=&gt; passed     4096       163952         
==&gt; 5/5 tests passed

Memory after adding N = 2^i + 1 items: 40.00 N + 72.00  (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2N+1 items,
            and then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          432         
=&gt; passed       64         2672         
=&gt; passed      256        10352         
=&gt; passed     1024        41072         
=&gt; passed     4096       163952         
==&gt; 5/5 tests passed

Memory: 40.00 N + 72.00  (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting N items,
            and then deleting all but one item.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          112         
=&gt; passed       64          112         
=&gt; passed      256          112         
=&gt; passed     1024          112         
=&gt; passed     4096          112         
==&gt; 5/5 tests passed

Memory after adding N = 2^i items: 112.00  (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting N items.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>        8          120   (1.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>       64          568   (8.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>      256         2104  (32.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>     1024         8248 (128.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>     4096        32824 (512.9x)
==&gt; 0/5 tests passed

Memory of iterator after adding N = 2^i items: 8.00 N + 56.00  (R^2 = 1.000)



Test 6: check for loitering by adding 100 strings and deleting them.
==&gt; passed

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  *  T = 128 random operations
  *  T = 256 random operations
  *  T = 512 random operations
==&gt; passed

Total: 22/27 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
Running 22 total tests.

Test 1a-1d: Total memory usage after inserting N integers.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          568         
=&gt; passed      256         2104         
=&gt; passed     1024         8248         
=&gt; passed     4096        32824         
==&gt; 4/4 tests passed


Memory: 8.00 N + 56.00  (R^2 = 1.000)



Test 2a-2d: Total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         1080         
=&gt; passed      256         4152         
=&gt; passed     1024        16440         
=&gt; passed     4096        65592         
==&gt; 4/4 tests passed


Memory: 16.00 N + 40.00  (R^2 = 1.000)



Test 3a-3d: Total memory usage after inserting 2N+1 items, and
            then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         2104         
=&gt; passed      256         8248         
=&gt; passed     1024        32824         
=&gt; passed     4096       131128         
==&gt; 4/4 tests passed


Memory: 32.00 N + 24.00  (R^2 = 1.000)



Test 4a-4d: Total memory usage after inserting N items, and
            then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64           72         
=&gt; passed      256           72         
=&gt; passed     1024           72         
=&gt; passed     4096           72         
==&gt; 4/4 tests passed


Memory: 72.00  (R^2 = 1.000)



Test 5a-5d: Total memory usage of iterator after inserting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          568         
=&gt; passed      256         2104         
=&gt; passed     1024         8248         
=&gt; passed     4096        32824         
==&gt; 4/4 tests passed


Memory: 8.00 N + 56.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them.
==&gt; passed

Test 7: Insert T items into queue; then iterate over queue and check that
worst-case constant memory is allocated or deallocated per
iterator operation?
  *  T = 64
  *  T = 128
  *  T = 256
==&gt; passed

Total: 22/22 tests passed!

================================================================



******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Subset
*-----------------------------------------------------------
Running 2 total tests.

Test 1: Check that only one Deque or RandomizedQueue object is created
  * filename = subset9.txt, N = 9, k = 1
  * filename = subset9.txt, N = 9, k = 2
  * filename = subset9.txt, N = 9, k = 4
  * filename = tinyTale.txt, N = 12, k = 10
  * filename = tale.txt, N = 138653, k = 50
==&gt; passed

Test 2: Check that the maximum size of any Deque or RandomizedQueue object
        created is &lt;= N
  * filename = subset9.txt, N = 9, k = 1
  * filename = subset9.txt, N = 9, k = 2
  * filename = subset9.txt, N = 9, k = 4
  * filename = tinyTale.txt, N = 12, k = 10
  * filename = tale.txt, N = 138653, k = 5
  * filename = tale.txt, N = 138653, k = 50
  * filename = tale.txt, N = 138653, k = 500
  * filename = tale.txt, N = 138653, k = 5000
  * filename = tale.txt, N = 138653, k = 50000
==&gt; passed

Test 3 (bonus): Check that maximum size of any or Deque or RandomizedQueue object
                created is &lt;= k
  * filename = tale.txt, N = 138653, k = 5
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 500
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 5000
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50000
    - max size of RandomizedQueue object = 138653
==&gt; <font color="#990000"><b>FAILED</b></font>

Total: 2/2 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: addFirst(), addLast(), removeFirst(), and removeLast()

                    N  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.01
=&gt; passed       16384     0.01
=&gt; passed      128000     0.02
=&gt; passed      256000     0.02
=&gt; passed     1024000     2.27
==&gt; 6/6 tests passed


N random calls to next() and hasNext() in iterator()

                    N  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.00
=&gt; passed       16384     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.01
=&gt; passed     1024000     0.58
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: enqueue(), sample(), dequeue(), isEmpty(), and size()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.01
=&gt; passed       16384     0.01
=&gt; passed      128000     0.02
=&gt; passed      256000     0.04
=&gt; passed     1024000     0.18
==&gt; 6/6 tests passed


N random calls to: next() and hasNext() from iterator()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.00
=&gt; passed       16384     0.01
=&gt; passed      128000     0.01
=&gt; passed      256000     0.03
=&gt; passed     1024000     0.10
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-04-Oct 21:26:32</td></tr>
        <tr><td>Raw Score</td><td>93.45 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#0E9800">32/35 tests passed</font>
Memory:       <font color="#109900">46/51 tests passed</font>
Timing:       <font color="#009900">24/24 tests passed</font>

Raw score: <font color="#0A9900">93.45%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 3.5K Oct  5 04:21 Deque.java
-rw-r--r-- 1 3.7K Oct  5 04:21 RandomizedQueue.java
-rw-r--r-- 1  451 Oct  5 04:21 Subset.java
-rw-r--r-- 1 2.7K Oct  5 04:21 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Deque.java
*-----------------------------------------------------------
================================================================

% javac RandomizedQueue.java
*-----------------------------------------------------------
================================================================

% javac Subset.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Deque.java:1:1: Outer types defined is 2 (max allowed is 1).
Deque.java:88:23: The warning 'unchecked' cannot be suppressed at this location.
Deque.java:103:19: Array brackets at illegal position.
RandomizedQueue.java:1:1: Outer types defined is 2 (max allowed is 1).
RandomizedQueue.java:21:23: The warning 'unchecked' cannot be suppressed at this location.
RandomizedQueue.java:42:27: The warning 'unchecked' cannot be suppressed at this location.
RandomizedQueue.java:104:7: Variable 'data' must be private and have accessor methods.
RandomizedQueue.java:104:11: Array brackets at illegal position.
RandomizedQueue.java:107:23: The warning 'unchecked' cannot be suppressed at this location.
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Subset:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Deque
*-----------------------------------------------------------
Running 15 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(), and
removeLast(). The probabilities of each operation are p1, p2, p3, and p4,
respectively.

Test 1: Calls to addFirst() and addLast() only
  *     5 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *    50 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *   500 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *  1000 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
==&gt; passed

Test 2: Calls to addFirst() and removeFirst()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 3: Calls to addFirst() and removeLast()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 4: Calls to addLast() and removeLast()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 5: Calls to addLast() and removeFirst()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 6: Calls to addFirst(), addLast(), removeFirst(), and removeLast()
  *     5 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *    50 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *   500 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *  1000 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
==&gt; passed

Test 7: Removing from an empty deque
  *  removeFirst()
  *  removeLast()
==&gt; passed

Test 8: Create multiple deque objects at the same time
==&gt; passed

Test 9: Check iterator() after calls only to addFirst()
==&gt; passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(),
         removeFirst(), and removeLast()
==&gt; passed

Test 11: Create two independent iterators to same deque
==&gt; passed

Test 12: Create Deque objects of different parameterized types
==&gt; passed

Test 13: Check that addFirst() and addLast() each throw a NullPointerException
         when inserting null items
==&gt; passed

Test 14: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 15: Check iterator() when Deque is empty
==&gt; passed


Total: 15/15 tests passed!

================================================================

Testing methods in RandomizedQueue
*-----------------------------------------------------------
Running 17 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), and sample().
The probabilities of each operation are p1, p2, and p3, respectively.

Test 1: Calls to enqueue() (and dequeue() just to verify)
  *     5 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *    50 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *   500 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *  1000 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
==&gt; passed

Test 2: Calls to enqueue() and dequeue()
  *     5 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
==&gt; passed

Test 3: Calls to enqueue() and sample()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
==&gt; passed

Test 4: Calls to enqueue(), dequeue(), and sample()
  *     5 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *    50 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *   500 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *  1000 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
==&gt; passed

Test 5: dequeue() and sample() from an empty randomized queue
  *  dequeue()
  *  sample()
==&gt; passed

Test 6: Create multiple randomized queue objects at the same time
==&gt; passed

Test 7: Check that iterator() returns correct items after a sequence of
         enqueue() operations
==&gt; passed

Test 8: Check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
==&gt; passed

Test 9: Create two independent iterators to same randomized queue
  *  N = 10
  *  N = 1000
==&gt; passed

Test 10: Create two iterators to different randomized queues
==&gt; passed

Test 11: Create RandomizedQueue objects of different parameterized types
==&gt; passed

Test 12: Check randomness of sample() by enqueueing strings, repeatedly calling
         sample(), and counting the frequency of each value.
  *  Enqueue strings A to C and sampling 3000 times

                            A     B     C 
                        -----------------
     observed frequency  3000     0     0   3000
     expected frequency  1000  1000  1000   3000

     chi-squared = 6000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to E and sampling 5000 times

                            A     B     C     D     E 
                        -----------------------------
     observed frequency     0     0     0  5000     0   5000
     expected frequency  1000  1000  1000  1000  1000   5000

     chi-squared = 20000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to H and sampling 8000 times

                            A     B     C     D     E     F     G     H 
                        -----------------------------------------------
     observed frequency     0     0  8000     0     0     0     0     0   8000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000   8000

     chi-squared = 56000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to J and sampling 10000 times

                            A     B     C     D     E     F     G     H     I     J 
                        -----------------------------------------------------------
     observed frequency     0     0     0     0 10000     0     0     0     0     0   10000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000  1000  1000   10000

     chi-squared = 90000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Check randomness of dequeue() by enqueueing strings, repeatedly calling
         dequeue() until a specific enqueued string appears.
  *  Enqueue strings A to C and call dequeue() until B is dequeued; repeat 3000 times

                            1     2     3 
                        -----------------
     observed frequency     0  3000     0   3000
     expected frequency  1000  1000  1000   3000

     chi-squared = 6000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to E and call dequeue() until A is dequeued; repeat 5000 times

                            1     2     3     4     5 
                        -----------------------------
     observed frequency  1687     0  3313     0     0   5000
     expected frequency  1000  1000  1000  1000  1000   5000

     chi-squared = 8821.94 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to H and call dequeue() until D is dequeued; repeat 8000 times

                            1     2     3     4     5     6     7     8 
                        -----------------------------------------------
     observed frequency  1119  1342  1109  1792     0     0  1326  1312   8000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000   8000

     chi-squared = 2973.89 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to J and call dequeue() until J is dequeued; repeat 10000 times

                            1     2     3     4     5     6     7     8     9    10 
                        -----------------------------------------------------------
     observed frequency     0     0  1326  1213  1236  1246  1260  1258  1183  1278   10000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000  1000  1000   10000

     chi-squared = 2512.79 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 14: Check randomness of iterator() by enqueueing strings, getting an iterator()
         and repeatedly calling next() until a specific enqueued string appears.
  *  Enqueue strings A to C, create iterator(), and call next() until A is returned;
     Repeat 3000 times
  *  Enqueue strings A to E, create iterator(), and call next() until D is returned;
     Repeat 5000 times
  *  Enqueue strings A to H, create iterator(), and call next() until E is returned;
     Repeat 8000 times
  *  Enqueue strings A to J, create iterator(), and call next() until B is returned;
     Repeat 10000 times
==&gt; passed

Test 15: Check that NullPointerException is thrown when inserting null items
==&gt; passed

Test 16: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 17: Check iterator() when RandomizedQueue is empty
==&gt; passed


Total: 15/17 tests passed!

================================================================

Testing methods in Subset
*-----------------------------------------------------------
Running 3 total tests.

Test 1: assignment inputs

% echo "A B C D E F G H I" | java Subset 3
[student solution]
B
F
E

% echo "A B C D E F G H I" | java Subset 3
[student solution]
H
G
E

% echo "AA BB BB BB BB BB CC CC " | java Subset 8
[student solution]
BB
BB
BB
CC
BB
AA
CC
BB

==&gt; passed

Test 2: various inputs

% echo "A B C D E F G H I" | java Subset 1
[student solution]
B

% echo "A B C D E F G H I" | java Subset 5
[student solution]
D
C
E
B
I

% echo "A B C D E F G H I" | java Subset 5
[student solution]
A
G
C
E
H

% echo "A B C D E F G H I" | java Subset 9
[student solution]
E
C
I
B
H
F
A
D
G

% echo "A B C D E F G H I" | java Subset 0
[student solution]

% echo "it was the best of times it was the worst of times" | java Subset 10
[student solution]
was
of
the
times
was
worst
times
best
the
it

% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 10
[student solution]
picturesque
"I
was
he
they,
horse,
they
solicitude
aid
was

% echo "AA BB BB BB BB BB CC CC " | java Subset 7
[student solution]
AA
BB
BB
BB
BB
CC
BB

==&gt; passed

Test 3: check that subsets are uniformly random
  * 1000 subsets of size 1 from subset10.txt

                            A     B     C     D     E     F     G     H     I     J 
                        -----------------------------------------------------------
     observed frequency    98   108   108   110   118   125   105   103   125     0   1000
     expected frequency   100   100   100   100   100   100   100   100   100   100   1000

     chi-squared = 118.40 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 250 subsets of size 4 from subset10.txt

                            A     B     C     D     E     F     G     H     I     J 
                        -----------------------------------------------------------
     observed frequency   126   128   127   118   111   126    84    60    65    55   1000
     expected frequency   100   100   100   100   100   100   100   100   100   100   1000

     chi-squared = 84.16 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 600 subsets of size 1 from subset6.txt

                            A     B     C     D     E     F 
                        -----------------------------------
     observed frequency   107   145   116    76   156     0   600
     expected frequency   100   100   100   100   100   100   600

     chi-squared = 160.42 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 300 subsets of size 2 from subset6.txt

                            A     B     C     D     E     F 
                        -----------------------------------
     observed frequency   145   110   116   161    68     0   600
     expected frequency   100   100   100   100   100   100   600

     chi-squared = 171.26 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 800 subsets of size 1 from subset8.txt
  * 160 subsets of size 5 from subset8.txt

                            A     B     C     D 
                        -----------------------
     observed frequency   244   131   347    78   800
     expected frequency   200   100   400   100   800

     chi-squared = 31.15 (p-value = 0.000001, reject if p-value &lt;= 0.0001)

==&gt; <font color="#990000"><b>FAILED</b></font>

Total: 2/3 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
Running 27 total tests.

Test 1a-1e: Total memory usage after inserting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          392         
=&gt; passed       64         2632         
=&gt; passed      256        10312         
=&gt; passed     1024        41032         
=&gt; passed     4096       163912         
==&gt; 5/5 tests passed

Memory: 40.00 N + 72.00  (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          432         
=&gt; passed       64         2672         
=&gt; passed      256        10352         
=&gt; passed     1024        41072         
=&gt; passed     4096       163952         
==&gt; 5/5 tests passed

Memory after adding N = 2^i + 1 items: 40.00 N + 72.00  (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2N+1 items,
            and then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          432         
=&gt; passed       64         2672         
=&gt; passed      256        10352         
=&gt; passed     1024        41072         
=&gt; passed     4096       163952         
==&gt; 5/5 tests passed

Memory: 40.00 N + 72.00  (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting N items,
            and then deleting all but one item.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          112         
=&gt; passed       64          112         
=&gt; passed      256          112         
=&gt; passed     1024          112         
=&gt; passed     4096          112         
==&gt; 5/5 tests passed

Memory after adding N = 2^i items: 112.00  (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting N items.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>        8          120   (1.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>       64          568   (8.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>      256         2104  (32.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>     1024         8248 (128.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>     4096        32824 (512.9x)
==&gt; 0/5 tests passed

Memory of iterator after adding N = 2^i items: 8.00 N + 56.00  (R^2 = 1.000)



Test 6: check for loitering by adding 100 strings and deleting them.
==&gt; passed

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  *  T = 128 random operations
  *  T = 256 random operations
  *  T = 512 random operations
==&gt; passed

Total: 22/27 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
Running 22 total tests.

Test 1a-1d: Total memory usage after inserting N integers.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          568         
=&gt; passed      256         2104         
=&gt; passed     1024         8248         
=&gt; passed     4096        32824         
==&gt; 4/4 tests passed


Memory: 8.00 N + 56.00  (R^2 = 1.000)



Test 2a-2d: Total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         1080         
=&gt; passed      256         4152         
=&gt; passed     1024        16440         
=&gt; passed     4096        65592         
==&gt; 4/4 tests passed


Memory: 16.00 N + 40.00  (R^2 = 1.000)



Test 3a-3d: Total memory usage after inserting 2N+1 items, and
            then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         2104         
=&gt; passed      256         8248         
=&gt; passed     1024        32824         
=&gt; passed     4096       131128         
==&gt; 4/4 tests passed


Memory: 32.00 N + 24.00  (R^2 = 1.000)



Test 4a-4d: Total memory usage after inserting N items, and
            then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64           72         
=&gt; passed      256           72         
=&gt; passed     1024           72         
=&gt; passed     4096           72         
==&gt; 4/4 tests passed


Memory: 72.00  (R^2 = 1.000)



Test 5a-5d: Total memory usage of iterator after inserting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          568         
=&gt; passed      256         2104         
=&gt; passed     1024         8248         
=&gt; passed     4096        32824         
==&gt; 4/4 tests passed


Memory: 8.00 N + 56.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them.
==&gt; passed

Test 7: Insert T items into queue; then iterate over queue and check that
worst-case constant memory is allocated or deallocated per
iterator operation?
  *  T = 64
  *  T = 128
  *  T = 256
==&gt; passed

Total: 22/22 tests passed!

================================================================



******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Subset
*-----------------------------------------------------------
Running 2 total tests.

Test 1: Check that only one Deque or RandomizedQueue object is created
  * filename = subset9.txt, N = 9, k = 1
  * filename = subset9.txt, N = 9, k = 2
  * filename = subset9.txt, N = 9, k = 4
  * filename = tinyTale.txt, N = 12, k = 10
  * filename = tale.txt, N = 138653, k = 50
==&gt; passed

Test 2: Check that the maximum size of any Deque or RandomizedQueue object
        created is &lt;= N
  * filename = subset9.txt, N = 9, k = 1
  * filename = subset9.txt, N = 9, k = 2
  * filename = subset9.txt, N = 9, k = 4
  * filename = tinyTale.txt, N = 12, k = 10
  * filename = tale.txt, N = 138653, k = 5
  * filename = tale.txt, N = 138653, k = 50
  * filename = tale.txt, N = 138653, k = 500
  * filename = tale.txt, N = 138653, k = 5000
  * filename = tale.txt, N = 138653, k = 50000
==&gt; passed

Test 3 (bonus): Check that maximum size of any or Deque or RandomizedQueue object
                created is &lt;= k
  * filename = tale.txt, N = 138653, k = 5
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 500
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 5000
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50000
    - max size of RandomizedQueue object = 138653
==&gt; <font color="#990000"><b>FAILED</b></font>

Total: 2/2 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: addFirst(), addLast(), removeFirst(), and removeLast()

                    N  seconds
------------------------------
=&gt; passed        1024     0.01
=&gt; passed        4096     0.02
=&gt; passed       16384     0.02
=&gt; passed      128000     0.05
=&gt; passed      256000     0.12
=&gt; passed     1024000     0.56
==&gt; 6/6 tests passed


N random calls to next() and hasNext() in iterator()

                    N  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.00
=&gt; passed       16384     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.01
=&gt; passed     1024000     0.47
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: enqueue(), sample(), dequeue(), isEmpty(), and size()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.01
=&gt; passed        4096     0.01
=&gt; passed       16384     0.01
=&gt; passed      128000     0.03
=&gt; passed      256000     0.07
=&gt; passed     1024000     0.55
==&gt; 6/6 tests passed


N random calls to: next() and hasNext() from iterator()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.00
=&gt; passed       16384     0.01
=&gt; passed      128000     0.01
=&gt; passed      256000     0.02
=&gt; passed     1024000     0.24
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-04-Oct 21:16:03</td></tr>
        <tr><td>Raw Score</td><td>72.42 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#4F9900">23/35 tests passed</font>
Memory:       <font color="#998800">24/51 tests passed</font>
Timing:       <font color="#009900">24/24 tests passed</font>

Raw score: <font color="#3A9900">72.42%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 3.5K Oct  5 04:11 Deque.java
-rw-r--r-- 1 4.0K Oct  5 04:11 RandomizedQueue.java
-rw-r--r-- 1  451 Oct  5 04:11 Subset.java
-rw-r--r-- 1 2.8K Oct  5 04:11 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Deque.java
*-----------------------------------------------------------
================================================================

% javac RandomizedQueue.java
*-----------------------------------------------------------
================================================================

% javac Subset.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Deque.java:1:1: Outer types defined is 2 (max allowed is 1).
Deque.java:88:23: The warning 'unchecked' cannot be suppressed at this location.
Deque.java:103:19: Array brackets at illegal position.
RandomizedQueue.java:1:1: Outer types defined is 2 (max allowed is 1).
RandomizedQueue.java:21:23: The warning 'unchecked' cannot be suppressed at this location.
RandomizedQueue.java:42:27: The warning 'unchecked' cannot be suppressed at this location.
RandomizedQueue.java:115:7: Variable 'data' must be private and have accessor methods.
RandomizedQueue.java:115:11: Array brackets at illegal position.
RandomizedQueue.java:118:23: The warning 'unchecked' cannot be suppressed at this location.
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Subset:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Deque
*-----------------------------------------------------------
Running 15 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(), and
removeLast(). The probabilities of each operation are p1, p2, p3, and p4,
respectively.

Test 1: Calls to addFirst() and addLast() only
  *     5 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *    50 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *   500 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *  1000 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
==&gt; passed

Test 2: Calls to addFirst() and removeFirst()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 3: Calls to addFirst() and removeLast()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 4: Calls to addLast() and removeLast()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 5: Calls to addLast() and removeFirst()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 6: Calls to addFirst(), addLast(), removeFirst(), and removeLast()
  *     5 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *    50 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *   500 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *  1000 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
==&gt; passed

Test 7: Removing from an empty deque
  *  removeFirst()
  *  removeLast()
==&gt; passed

Test 8: Create multiple deque objects at the same time
==&gt; passed

Test 9: Check iterator() after calls only to addFirst()
==&gt; passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(),
         removeFirst(), and removeLast()
==&gt; passed

Test 11: Create two independent iterators to same deque
==&gt; passed

Test 12: Create Deque objects of different parameterized types
==&gt; passed

Test 13: Check that addFirst() and addLast() each throw a NullPointerException
         when inserting null items
==&gt; passed

Test 14: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 15: Check iterator() when Deque is empty
==&gt; passed


Total: 15/15 tests passed!

================================================================

Testing methods in RandomizedQueue
*-----------------------------------------------------------
Running 17 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), and sample().
The probabilities of each operation are p1, p2, and p3, respectively.

Test 1: Calls to enqueue() (and dequeue() just to verify)
  *     5 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test1(TestRandomizedQueue.java:95)
     TestRandomizedQueue.main(TestRandomizedQueue.java:726)

  *    50 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test1(TestRandomizedQueue.java:96)
     TestRandomizedQueue.main(TestRandomizedQueue.java:726)

  *   500 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test1(TestRandomizedQueue.java:97)
     TestRandomizedQueue.main(TestRandomizedQueue.java:726)

  *  1000 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test1(TestRandomizedQueue.java:98)
     TestRandomizedQueue.main(TestRandomizedQueue.java:726)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 2: Calls to enqueue() and dequeue()
  *     5 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test2(TestRandomizedQueue.java:107)
     TestRandomizedQueue.main(TestRandomizedQueue.java:727)

  *    50 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:59)
     TestRandomizedQueue.test2(TestRandomizedQueue.java:108)
     TestRandomizedQueue.main(TestRandomizedQueue.java:727)

  *   500 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test2(TestRandomizedQueue.java:109)
     TestRandomizedQueue.main(TestRandomizedQueue.java:727)

  *  1000 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test2(TestRandomizedQueue.java:110)
     TestRandomizedQueue.main(TestRandomizedQueue.java:727)

  *     5 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:59)
     TestRandomizedQueue.test2(TestRandomizedQueue.java:111)
     TestRandomizedQueue.main(TestRandomizedQueue.java:727)

  *    50 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:59)
     TestRandomizedQueue.test2(TestRandomizedQueue.java:112)
     TestRandomizedQueue.main(TestRandomizedQueue.java:727)

  *   500 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:59)
     TestRandomizedQueue.test2(TestRandomizedQueue.java:113)
     TestRandomizedQueue.main(TestRandomizedQueue.java:727)

  *  1000 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:59)
     TestRandomizedQueue.test2(TestRandomizedQueue.java:114)
     TestRandomizedQueue.main(TestRandomizedQueue.java:727)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 3: Calls to enqueue() and sample()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test3(TestRandomizedQueue.java:123)
     TestRandomizedQueue.main(TestRandomizedQueue.java:728)

  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test3(TestRandomizedQueue.java:124)
     TestRandomizedQueue.main(TestRandomizedQueue.java:728)

  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test3(TestRandomizedQueue.java:125)
     TestRandomizedQueue.main(TestRandomizedQueue.java:728)

  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test3(TestRandomizedQueue.java:126)
     TestRandomizedQueue.main(TestRandomizedQueue.java:728)

  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.sample(RandomizedQueue.java:95)
     TestRandomizedQueue.random(TestRandomizedQueue.java:68)
     TestRandomizedQueue.test3(TestRandomizedQueue.java:127)
     TestRandomizedQueue.main(TestRandomizedQueue.java:728)

  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.sample(RandomizedQueue.java:95)
     TestRandomizedQueue.random(TestRandomizedQueue.java:68)
     TestRandomizedQueue.test3(TestRandomizedQueue.java:128)
     TestRandomizedQueue.main(TestRandomizedQueue.java:728)

  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.sample(RandomizedQueue.java:95)
     TestRandomizedQueue.random(TestRandomizedQueue.java:68)
     TestRandomizedQueue.test3(TestRandomizedQueue.java:129)
     TestRandomizedQueue.main(TestRandomizedQueue.java:728)

  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.sample(RandomizedQueue.java:95)
     TestRandomizedQueue.random(TestRandomizedQueue.java:68)
     TestRandomizedQueue.test3(TestRandomizedQueue.java:130)
     TestRandomizedQueue.main(TestRandomizedQueue.java:728)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 4: Calls to enqueue(), dequeue(), and sample()
  *     5 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test4(TestRandomizedQueue.java:139)
     TestRandomizedQueue.main(TestRandomizedQueue.java:729)

  *    50 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test4(TestRandomizedQueue.java:140)
     TestRandomizedQueue.main(TestRandomizedQueue.java:729)

  *   500 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test4(TestRandomizedQueue.java:141)
     TestRandomizedQueue.main(TestRandomizedQueue.java:729)

  *  1000 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test4(TestRandomizedQueue.java:142)
     TestRandomizedQueue.main(TestRandomizedQueue.java:729)

  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.sample(RandomizedQueue.java:95)
     TestRandomizedQueue.random(TestRandomizedQueue.java:68)
     TestRandomizedQueue.test4(TestRandomizedQueue.java:143)
     TestRandomizedQueue.main(TestRandomizedQueue.java:729)

  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:80)
     TestRandomizedQueue.test4(TestRandomizedQueue.java:144)
     TestRandomizedQueue.main(TestRandomizedQueue.java:729)

  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.sample(RandomizedQueue.java:95)
     TestRandomizedQueue.random(TestRandomizedQueue.java:68)
     TestRandomizedQueue.test4(TestRandomizedQueue.java:145)
     TestRandomizedQueue.main(TestRandomizedQueue.java:729)

  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.random(TestRandomizedQueue.java:59)
     TestRandomizedQueue.test4(TestRandomizedQueue.java:146)
     TestRandomizedQueue.main(TestRandomizedQueue.java:729)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5: dequeue() and sample() from an empty randomized queue
  *  dequeue()
  *  sample()
==&gt; passed

Test 6: Create multiple randomized queue objects at the same time
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.twoRandomizedQueues(TestRandomizedQueue.java:212)
     TestRandomizedQueue.test6(TestRandomizedQueue.java:251)
     TestRandomizedQueue.main(TestRandomizedQueue.java:731)

     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.twoRandomizedQueues(TestRandomizedQueue.java:212)
     TestRandomizedQueue.test6(TestRandomizedQueue.java:252)
     TestRandomizedQueue.main(TestRandomizedQueue.java:731)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 7: Check that iterator() returns correct items after a sequence of
         enqueue() operations
==&gt; passed

Test 8: Check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.test8(TestRandomizedQueue.java:299)
     TestRandomizedQueue.main(TestRandomizedQueue.java:733)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 9: Create two independent iterators to same randomized queue
  *  N = 10
  *  N = 1000
==&gt; passed

Test 10: Create two iterators to different randomized queues
==&gt; passed

Test 11: Create RandomizedQueue objects of different parameterized types
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.test11(TestRandomizedQueue.java:442)
     TestRandomizedQueue.main(TestRandomizedQueue.java:736)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 12: Check randomness of sample() by enqueueing strings, repeatedly calling
         sample(), and counting the frequency of each value.
  *  Enqueue strings A to C and sampling 3000 times

                            A     B     C 
                        -----------------
     observed frequency  1513  1487     0   3000
     expected frequency  1000  1000  1000   3000

     chi-squared = 1500.34 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to E and sampling 5000 times

                            A     B     C     D     E 
                        -----------------------------
     observed frequency  1254  1204  1245  1297     0   5000
     expected frequency  1000  1000  1000  1000  1000   5000

     chi-squared = 1254.37 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to H and sampling 8000 times

                            A     B     C     D     E     F     G     H 
                        -----------------------------------------------
     observed frequency  1161  1141  1107  1111  1164  1165  1151     0   8000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000   8000

     chi-squared = 1146.49 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to J and sampling 10000 times

                            A     B     C     D     E     F     G     H     I     J 
                        -----------------------------------------------------------
     observed frequency  1130  1103  1107  1094  1168  1161  1064  1097  1076     0   10000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000  1000  1000   10000

     chi-squared = 1121.22 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Check randomness of dequeue() by enqueueing strings, repeatedly calling
         dequeue() until a specific enqueued string appears.
  *  Enqueue strings A to C and call dequeue() until B is dequeued; repeat 3000 times
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.dequeueRandomness(TestRandomizedQueue.java:534)
     TestRandomizedQueue.test13(TestRandomizedQueue.java:567)
     TestRandomizedQueue.main(TestRandomizedQueue.java:738)

  *  Enqueue strings A to E and call dequeue() until E is dequeued; repeat 5000 times
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.dequeueRandomness(TestRandomizedQueue.java:534)
     TestRandomizedQueue.test13(TestRandomizedQueue.java:568)
     TestRandomizedQueue.main(TestRandomizedQueue.java:738)

  *  Enqueue strings A to H and call dequeue() until B is dequeued; repeat 8000 times
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.dequeueRandomness(TestRandomizedQueue.java:534)
     TestRandomizedQueue.test13(TestRandomizedQueue.java:569)
     TestRandomizedQueue.main(TestRandomizedQueue.java:738)

  *  Enqueue strings A to J and call dequeue() until H is dequeued; repeat 10000 times
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     TestRandomizedQueue.dequeueRandomness(TestRandomizedQueue.java:534)
     TestRandomizedQueue.test13(TestRandomizedQueue.java:570)
     TestRandomizedQueue.main(TestRandomizedQueue.java:738)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 14: Check randomness of iterator() by enqueueing strings, getting an iterator()
         and repeatedly calling next() until a specific enqueued string appears.
  *  Enqueue strings A to C, create iterator(), and call next() until C is returned;
     Repeat 3000 times
  *  Enqueue strings A to E, create iterator(), and call next() until E is returned;
     Repeat 5000 times
  *  Enqueue strings A to H, create iterator(), and call next() until C is returned;
     Repeat 8000 times
  *  Enqueue strings A to J, create iterator(), and call next() until D is returned;
     Repeat 10000 times
==&gt; passed

Test 15: Check that NullPointerException is thrown when inserting null items
==&gt; passed

Test 16: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 17: Check iterator() when RandomizedQueue is empty
==&gt; passed


Total: 8/17 tests passed!

================================================================

Testing methods in Subset
*-----------------------------------------------------------
Running 3 total tests.

Test 1: assignment inputs

% echo "A B C D E F G H I" | java Subset 3
[student solution]
I
H
H

Error: Output has too many occurrences of: H
% echo "A B C D E F G H I" | java Subset 3
[student solution]
I
H
G

% echo "AA BB BB BB BB BB CC CC " | java Subset 8
[student solution]
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     Subset.main(Subset.java:14)
     TestSubset.run(TestSubset.java:76)
     TestSubset.test1(TestSubset.java:97)
     TestSubset.main(TestSubset.java:205)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 2: various inputs

% echo "A B C D E F G H I" | java Subset 1
[student solution]
I

% echo "A B C D E F G H I" | java Subset 5
[student solution]
I
H
G
I
I

Error: Output has too many occurrences of: I
% echo "A B C D E F G H I" | java Subset 5
[student solution]
I
I
G
F
G

Error: Output has too many occurrences of: I
% echo "A B C D E F G H I" | java Subset 9
[student solution]
     java.lang.IllegalArgumentException: n must be positive
     java.util.Random.nextInt(Random.java:300)
     StdRandom.uniform(StdRandom.java:97)
     RandomizedQueue.dequeue(RandomizedQueue.java:75)
     Subset.main(Subset.java:14)
     TestSubset.run(TestSubset.java:76)
     TestSubset.test2(TestSubset.java:110)
     TestSubset.main(TestSubset.java:206)

% echo "A B C D E F G H I" | java Subset 0
[student solution]

% echo "it was the best of times it was the worst of times" | java Subset 10
[student solution]
times
of
worst
of
was
it
worst
was
it
the

Error: Output has too many occurrences of: worst
% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 10
[student solution]
***
LICENSE
FULL
END:
***
eBooks.
new
about
hear
to

% echo "AA BB BB BB BB BB CC CC " | java Subset 7
[student solution]
CC
CC
BB
BB
CC
BB
BB

Error: Output has too many occurrences of: CC
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 3: check that subsets are uniformly random
  * 1000 subsets of size 1 from subset10.txt

                            A     B     C     D     E     F     G     H     I     J 
                        -----------------------------------------------------------
     observed frequency     0     0     0     0     0     0     0     0     0  1000   1000
     expected frequency   100   100   100   100   100   100   100   100   100   100   1000

     chi-squared = 9000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 250 subsets of size 4 from subset10.txt

                            A     B     C     D     E     F     G     H     I     J 
                        -----------------------------------------------------------
     observed frequency     0     0     0     0     0     0   152   229   278   341   1000
     expected frequency   100   100   100   100   100   100   100   100   100   100   1000

     chi-squared = 1691.10 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 600 subsets of size 1 from subset6.txt

                            A     B     C     D     E     F 
                        -----------------------------------
     observed frequency     0     0     0     0     0   600   600
     expected frequency   100   100   100   100   100   100   600

     chi-squared = 3000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 300 subsets of size 2 from subset6.txt

                            A     B     C     D     E     F 
                        -----------------------------------
     observed frequency     0     0     0     0   241   359   600
     expected frequency   100   100   100   100   100   100   600

     chi-squared = 1269.62 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 800 subsets of size 1 from subset8.txt

                            A     B     C     D 
                        -----------------------
     observed frequency     0     0   800     0   800
     expected frequency   200   100   400   100   800

     chi-squared = 800.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 160 subsets of size 5 from subset8.txt

                            A     B     C     D 
                        -----------------------
     observed frequency     0     0   614   186   800
     expected frequency   200   100   400   100   800

     chi-squared = 488.45 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

==&gt; <font color="#990000"><b>FAILED</b></font>

Total: 0/3 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
Running 27 total tests.

Test 1a-1e: Total memory usage after inserting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          392         
=&gt; passed       64         2632         
=&gt; passed      256        10312         
=&gt; passed     1024        41032         
=&gt; passed     4096       163912         
==&gt; 5/5 tests passed

Memory: 40.00 N + 72.00  (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          432         
=&gt; passed       64         2672         
=&gt; passed      256        10352         
=&gt; passed     1024        41072         
=&gt; passed     4096       163952         
==&gt; 5/5 tests passed

Memory after adding N = 2^i + 1 items: 40.00 N + 72.00  (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2N+1 items,
            and then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          432         
=&gt; passed       64         2672         
=&gt; passed      256        10352         
=&gt; passed     1024        41072         
=&gt; passed     4096       163952         
==&gt; 5/5 tests passed

Memory: 40.00 N + 72.00  (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting N items,
            and then deleting all but one item.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          112         
=&gt; passed       64          112         
=&gt; passed      256          112         
=&gt; passed     1024          112         
=&gt; passed     4096          112         
==&gt; 5/5 tests passed

Memory after adding N = 2^i items: 112.00  (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting N items.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>        8          120   (1.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>       64          568   (8.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>      256         2104  (32.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>     1024         8248 (128.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>     4096        32824 (512.9x)
==&gt; 0/5 tests passed

Memory of iterator after adding N = 2^i items: 8.00 N + 56.00  (R^2 = 1.000)



Test 6: check for loitering by adding 100 strings and deleting them.
==&gt; passed

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  *  T = 128 random operations
  *  T = 256 random operations
  *  T = 512 random operations
==&gt; passed

Total: 22/27 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
Exception in thread "main" java.lang.IllegalArgumentException: n must be positive
	at java.util.Random.nextInt(Random.java:300)
	at StdRandom.uniform(StdRandom.java:97)
	at RandomizedQueue.dequeue(RandomizedQueue.java:75)
	at MemoryOfRandomizedQueue.test6(MemoryOfRandomizedQueue.java:374)
	at MemoryOfRandomizedQueue.main(MemoryOfRandomizedQueue.java:468)
Running 22 total tests.

Test 1a-1d: Total memory usage after inserting N integers.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          568         
=&gt; passed      256         2104         
=&gt; passed     1024         8248         
=&gt; passed     4096        32824         
==&gt; 4/4 tests passed


Memory: 8.00 N + 56.00  (R^2 = 1.000)



Test 2a-2d: Total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         1080         
=&gt; passed      256         4152         
=&gt; passed     1024        16440         
=&gt; passed     4096        65592         
==&gt; 4/4 tests passed


Memory: 16.00 N + 40.00  (R^2 = 1.000)



Test 3a-3d: Total memory usage after inserting 2N+1 items, and
            then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         2104         
=&gt; passed      256         8248         
=&gt; passed     1024        32824         
=&gt; passed     4096       131128         
==&gt; 4/4 tests passed


Memory: 32.00 N + 24.00  (R^2 = 1.000)



Test 4a-4d: Total memory usage after inserting N items, and
            then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64           72         
=&gt; passed      256           72         
=&gt; passed     1024           72         
=&gt; passed     4096           72         
==&gt; 4/4 tests passed


Memory: 72.00  (R^2 = 1.000)



Test 5a-5d: Total memory usage of iterator after inserting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          568         
=&gt; passed      256         2104         
=&gt; passed     1024         8248         
=&gt; passed     4096        32824         
==&gt; 4/4 tests passed


Memory: 8.00 N + 56.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them.

Total: 0/22 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================



******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Subset
*-----------------------------------------------------------
Running 2 total tests.

Test 1: Check that only one Deque or RandomizedQueue object is created
  * filename = subset9.txt, N = 9, k = 1
  * filename = subset9.txt, N = 9, k = 2
  * filename = subset9.txt, N = 9, k = 4
  * filename = tinyTale.txt, N = 12, k = 10
  * filename = tale.txt, N = 138653, k = 50
==&gt; passed

Test 2: Check that the maximum size of any Deque or RandomizedQueue object
        created is &lt;= N
  * filename = subset9.txt, N = 9, k = 1
  * filename = subset9.txt, N = 9, k = 2
  * filename = subset9.txt, N = 9, k = 4
  * filename = tinyTale.txt, N = 12, k = 10
  * filename = tale.txt, N = 138653, k = 5
  * filename = tale.txt, N = 138653, k = 50
  * filename = tale.txt, N = 138653, k = 500
  * filename = tale.txt, N = 138653, k = 5000
  * filename = tale.txt, N = 138653, k = 50000
==&gt; passed

Test 3 (bonus): Check that maximum size of any or Deque or RandomizedQueue object
                created is &lt;= k
  * filename = tale.txt, N = 138653, k = 5
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 500
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 5000
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50000
    - max size of RandomizedQueue object = 138653
==&gt; <font color="#990000"><b>FAILED</b></font>

Total: 2/2 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: addFirst(), addLast(), removeFirst(), and removeLast()

                    N  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.01
=&gt; passed       16384     0.03
=&gt; passed      128000     0.05
=&gt; passed      256000     0.15
=&gt; passed     1024000     0.58
==&gt; 6/6 tests passed


N random calls to next() and hasNext() in iterator()

                    N  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.00
=&gt; passed       16384     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.01
=&gt; passed     1024000     0.50
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: enqueue(), sample(), dequeue(), isEmpty(), and size()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.01
=&gt; passed        4096     0.01
=&gt; passed       16384     0.00
=&gt; passed      128000     0.02
=&gt; passed      256000     0.05
=&gt; passed     1024000     0.38
==&gt; 6/6 tests passed


N random calls to: next() and hasNext() from iterator()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.00
=&gt; passed       16384     0.01
=&gt; passed      128000     0.01
=&gt; passed      256000     0.02
=&gt; passed     1024000     0.16
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-04-Oct 20:59:19</td></tr>
        <tr><td>Raw Score</td><td>87.88 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#990000">FAILED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#1F9900">29/35 tests passed</font>
Memory:       <font color="#109900">46/51 tests passed</font>
Timing:       <font color="#009900">24/24 tests passed</font>

Raw score: <font color="#159900">87.88%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 3.4K Oct  5 03:54 Deque.java
-rw-r--r-- 1 3.5K Oct  5 03:54 RandomizedQueue.java
-rw-r--r-- 1  456 Oct  5 03:54 Subset.java
-rw-r--r-- 1 2.7K Oct  5 03:54 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Deque.java
*-----------------------------------------------------------
================================================================

% javac RandomizedQueue.java
*-----------------------------------------------------------
================================================================

% javac Subset.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
Deque.java:1:1: Outer types defined is 2 (max allowed is 1).
Deque.java:42:11: 'if' is not followed by whitespace.
Deque.java:42:25: '{' is not preceded with whitespace.
Deque.java:50:11: 'if' is not followed by whitespace.
Deque.java:50:25: '{' is not preceded with whitespace.
Deque.java:62:11: 'if' is not followed by whitespace.
Deque.java:62:22: '{' is not preceded with whitespace.
Deque.java:70:11: 'if' is not followed by whitespace.
Deque.java:70:22: '{' is not preceded with whitespace.
Deque.java:83:23: The warning 'unchecked' cannot be suppressed at this location.
Deque.java:95:45: '&gt;' is followed by an illegal character.
Deque.java:95:45: '{' is not preceded with whitespace.
Deque.java:97:19: Array brackets at illegal position.
Deque.java:100:18: '(' is preceded with whitespace.
Deque.java:100:28: '{' is not preceded with whitespace.
Deque.java:111:11: 'if' is not followed by whitespace.
Deque.java:111:23: '{' is not preceded with whitespace.
RandomizedQueue.java:1:1: Outer types defined is 2 (max allowed is 1).
RandomizedQueue.java:21:23: The warning 'unchecked' cannot be suppressed at this location.
RandomizedQueue.java:42:27: The warning 'unchecked' cannot be suppressed at this location.
RandomizedQueue.java:101:7: Variable 'data' must be private and have accessor methods.
RandomizedQueue.java:101:11: Array brackets at illegal position.
RandomizedQueue.java:104:23: The warning 'unchecked' cannot be suppressed at this location.
Subset.java:7:34: '=' is not preceded with whitespace.
Subset.java:9:14: 'while' is not followed by whitespace.
Subset.java:9:32: '{' is not preceded with whitespace.
Subset.java:10:17: '=' is not preceded with whitespace.
Subset.java:10:18: '=' is not followed by whitespace.
Subset.java:14:12: 'for' is not followed by whitespace.
Subset.java:14:18: '=' is not preceded with whitespace.
Subset.java:14:19: '=' is not followed by whitespace.
Subset.java:14:21: ';' is not followed by whitespace.
Subset.java:14:22: '&lt;' is not preceded with whitespace.
Subset.java:14:23: '&lt;' is not followed by whitespace.
Subset.java:14:25: ';' is not followed by whitespace.
Subset.java:14:29: '{' is not preceded with whitespace.
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Deque:

RandomizedQueue:

Subset:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Deque
*-----------------------------------------------------------
Running 15 total tests.

Tests 1-6 make random calls to addFirst(), addLast(), removeFirst(), and
removeLast(). The probabilities of each operation are p1, p2, p3, and p4,
respectively.

Test 1: Calls to addFirst() and addLast() only
  *     5 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *    50 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *   500 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
  *  1000 random calls (p1 = 0.5, p2 = 0.5, p3 = 0.0, p4 = 0.0)
==&gt; passed

Test 2: Calls to addFirst() and removeFirst()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 3: Calls to addFirst() and removeLast()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 4: Calls to addLast() and removeLast()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.0, p4 = 0.1)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.0, p4 = 0.9)
==&gt; passed

Test 5: Calls to addLast() and removeFirst()
  *     5 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.9, p3 = 0.1, p4 = 0.0)
  *     5 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *    50 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *   500 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
  *  1000 random calls (p1 = 0.0, p2 = 0.1, p3 = 0.9, p4 = 0.0)
==&gt; passed

Test 6: Calls to addFirst(), addLast(), removeFirst(), and removeLast()
  *     5 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *    50 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *   500 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *  1000 random calls (p1 = 0.4, p2 = 0.4, p3 = 0.1, p4 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.4, p4 = 0.4)
==&gt; passed

Test 7: Removing from an empty deque
  *  removeFirst()
  *  removeLast()
==&gt; passed

Test 8: Create multiple deque objects at the same time
==&gt; passed

Test 9: Check iterator() after calls only to addFirst()
==&gt; passed

Test 10: Check iterator() after intermixed calls to addFirst(), addLast(),
         removeFirst(), and removeLast()
==&gt; passed

Test 11: Create two independent iterators to same deque
==&gt; passed

Test 12: Create Deque objects of different parameterized types
==&gt; passed

Test 13: Check that addFirst() and addLast() each throw a NullPointerException
         when inserting null items
==&gt; passed

Test 14: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 15: Check iterator() when Deque is empty
==&gt; passed


Total: 15/15 tests passed!

================================================================

Testing methods in RandomizedQueue
*-----------------------------------------------------------
Running 17 total tests.

Tests 1-4 make random calls to enqueue(), dequeue(), and sample().
The probabilities of each operation are p1, p2, and p3, respectively.

Test 1: Calls to enqueue() (and dequeue() just to verify)
  *     5 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *    50 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *   500 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
  *  1000 random calls (p1 = 1.0, p2 = 0.0, p3 = 0.0)
==&gt; passed

Test 2: Calls to enqueue() and dequeue()
  *     5 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *    50 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *   500 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *  1000 random calls (p1 = 0.9, p2 = 0.1, p3 = 0.0)
  *     5 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *    50 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *   500 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
  *  1000 random calls (p1 = 0.1, p2 = 0.9, p3 = 0.0)
==&gt; passed

Test 3: Calls to enqueue() and sample()
  *     5 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *    50 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *   500 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *  1000 random calls (p1 = 0.9, p2 = 0.0, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *    50 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *   500 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
  *  1000 random calls (p1 = 0.1, p2 = 0.0, p3 = 0.9)
==&gt; passed

Test 4: Calls to enqueue(), dequeue(), and sample()
  *     5 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *    50 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *   500 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *  1000 random calls (p1 = 0.8, p2 = 0.1, p3 = 0.1)
  *     5 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *    50 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *   500 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
  *  1000 random calls (p1 = 0.1, p2 = 0.1, p3 = 0.8)
==&gt; passed

Test 5: dequeue() and sample() from an empty randomized queue
  *  dequeue()
  *  sample()
==&gt; passed

Test 6: Create multiple randomized queue objects at the same time
==&gt; passed

Test 7: Check that iterator() returns correct items after a sequence of
         enqueue() operations
==&gt; passed

Test 8: Check that iterator() returns correct items after sequence of enqueue()
        and dequeue() operations
==&gt; passed

Test 9: Create two independent iterators to same randomized queue
  *  N = 10
     -  two iterators should return different sequence of values
  *  N = 1000
     -  two iterators should return different sequence of values
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 10: Create two iterators to different randomized queues
==&gt; passed

Test 11: Create RandomizedQueue objects of different parameterized types
==&gt; passed

Test 12: Check randomness of sample() by enqueueing strings, repeatedly calling
         sample(), and counting the frequency of each value.
  *  Enqueue strings A to C and sampling 3000 times

                            A     B     C 
                        -----------------
     observed frequency  3000     0     0   3000
     expected frequency  1000  1000  1000   3000

     chi-squared = 6000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to E and sampling 5000 times

                            A     B     C     D     E 
                        -----------------------------
     observed frequency     0     0  5000     0     0   5000
     expected frequency  1000  1000  1000  1000  1000   5000

     chi-squared = 20000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to H and sampling 8000 times

                            A     B     C     D     E     F     G     H 
                        -----------------------------------------------
     observed frequency     0     0     0     0     0  8000     0     0   8000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000   8000

     chi-squared = 56000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to J and sampling 10000 times

                            A     B     C     D     E     F     G     H     I     J 
                        -----------------------------------------------------------
     observed frequency     0 10000     0     0     0     0     0     0     0     0   10000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000  1000  1000   10000

     chi-squared = 90000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 13: Check randomness of dequeue() by enqueueing strings, repeatedly calling
         dequeue() until a specific enqueued string appears.
  *  Enqueue strings A to C and call dequeue() until C is dequeued; repeat 3000 times

                            1     2     3 
                        -----------------
     observed frequency     0     0  3000   3000
     expected frequency  1000  1000  1000   3000

     chi-squared = 6000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to E and call dequeue() until D is dequeued; repeat 5000 times

                            1     2     3     4     5 
                        -----------------------------
     observed frequency  1658     0     0  1667  1675   5000
     expected frequency  1000  1000  1000  1000  1000   5000

     chi-squared = 3333.48 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to H and call dequeue() until C is dequeued; repeat 8000 times

                            1     2     3     4     5     6     7     8 
                        -----------------------------------------------
     observed frequency  1125  1287  1410   897  1982     0     0  1299   8000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000   8000

     chi-squared = 3330.43 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

  *  Enqueue strings A to J and call dequeue() until J is dequeued; repeat 10000 times

                            1     2     3     4     5     6     7     8     9    10 
                        -----------------------------------------------------------
     observed frequency     0     0  1264  1246  1243  1243  1241  1266  1226  1271   10000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000  1000  1000   10000

     chi-squared = 2501.66 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

     Note: a correct solution will fail this test by bad luck 1 time in 10000.

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 14: Check randomness of iterator() by enqueueing strings, getting an iterator()
         and repeatedly calling next() until a specific enqueued string appears.
  *  Enqueue strings A to C, create iterator(), and call next() until C is returned;
     Repeat 3000 times

                            1     2     3 
                        -----------------
     observed frequency     0     0  3000   3000
     expected frequency  1000  1000  1000   3000

     chi-squared = 6000.00 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  *  Enqueue strings A to E, create iterator(), and call next() until A is returned;
     Repeat 5000 times

                            1     2     3     4     5 
                        -----------------------------
     observed frequency  1702     0  3298     0     0   5000
     expected frequency  1000  1000  1000  1000  1000   5000

     chi-squared = 8773.61 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  *  Enqueue strings A to H, create iterator(), and call next() until D is returned;
     Repeat 8000 times

                            1     2     3     4     5     6     7     8 
                        -----------------------------------------------
     observed frequency  1116  1346  1086  1760     0     0  1350  1342   8000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000   8000

     chi-squared = 2957.63 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  *  Enqueue strings A to J, create iterator(), and call next() until G is returned;
     Repeat 10000 times

                            1     2     3     4     5     6     7     8     9    10 
                        -----------------------------------------------------------
     observed frequency  1079  1228  1459     0     0  1303  1232  1236  1207  1256   10000
     expected frequency  1000  1000  1000  1000  1000  1000  1000  1000  1000  1000   10000

     chi-squared = 2578.62 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 15: Check that NullPointerException is thrown when inserting null items
     - NullPointerException NOT thrown for enqueue(null)
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 16: Check that remove() and next() throw the specified exceptions in iterator()
==&gt; passed

Test 17: Check iterator() when RandomizedQueue is empty
==&gt; passed


Total: 12/17 tests passed!

================================================================

Testing methods in Subset
*-----------------------------------------------------------
Running 3 total tests.

Test 1: assignment inputs

% echo "A B C D E F G H I" | java Subset 3
[student solution]
F
E
C

% echo "A B C D E F G H I" | java Subset 3
[student solution]
E
A
B

% echo "AA BB BB BB BB BB CC CC " | java Subset 8
[student solution]
BB
BB
BB
BB
BB
AA
CC
CC

==&gt; passed

Test 2: various inputs

% echo "A B C D E F G H I" | java Subset 1
[student solution]
D

% echo "A B C D E F G H I" | java Subset 5
[student solution]
B
G
C
I
D

% echo "A B C D E F G H I" | java Subset 5
[student solution]
G
C
D
E
A

% echo "A B C D E F G H I" | java Subset 9
[student solution]
H
G
E
A
D
C
F
B
I

% echo "A B C D E F G H I" | java Subset 0
[student solution]

% echo "it was the best of times it was the worst of times" | java Subset 10
[student solution]
of
times
times
of
best
it
the
was
was
it

% echo "It was the best of times, it was the worst of times, it was ..." | java Subset 10
[student solution]
Lorry,
ask.
sons
window
of
decreed,
The
custom
it
Gutenberg-tm

% echo "AA BB BB BB BB BB CC CC " | java Subset 7
[student solution]
BB
BB
BB
AA
CC
BB
CC

==&gt; passed

Test 3: check that subsets are uniformly random
  * 1000 subsets of size 1 from subset10.txt

                            A     B     C     D     E     F     G     H     I     J 
                        -----------------------------------------------------------
     observed frequency   105    98   115   112   136   101    93    94   146     0   1000
     expected frequency   100   100   100   100   100   100   100   100   100   100   1000

     chi-squared = 138.96 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 250 subsets of size 4 from subset10.txt

                            A     B     C     D     E     F     G     H     I     J 
                        -----------------------------------------------------------
     observed frequency   118   111   125   124   114   132    96    57    64    59   1000
     expected frequency   100   100   100   100   100   100   100   100   100   100   1000

     chi-squared = 77.08 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 600 subsets of size 1 from subset6.txt

                            A     B     C     D     E     F 
                        -----------------------------------
     observed frequency   113   125   111   109   142     0   600
     expected frequency   100   100   100   100   100   100   600

     chi-squared = 127.60 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 300 subsets of size 2 from subset6.txt

                            A     B     C     D     E     F 
                        -----------------------------------
     observed frequency   138   108   133   150    71     0   600
     expected frequency   100   100   100   100   100   100   600

     chi-squared = 159.38 (p-value = 0.000000, reject if p-value &lt;= 0.0001)

  * 800 subsets of size 1 from subset8.txt
  * 160 subsets of size 5 from subset8.txt

                            A     B     C     D 
                        -----------------------
     observed frequency   229   133   356    82   800
     expected frequency   200   100   400   100   800

     chi-squared = 23.18 (p-value = 0.000037, reject if p-value &lt;= 0.0001)

==&gt; <font color="#990000"><b>FAILED</b></font>

Total: 2/3 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Deque
*-----------------------------------------------------------
Running 27 total tests.

Test 1a-1e: Total memory usage after inserting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          392         
=&gt; passed       64         2632         
=&gt; passed      256        10312         
=&gt; passed     1024        41032         
=&gt; passed     4096       163912         
==&gt; 5/5 tests passed

Memory: 40.00 N + 72.00  (R^2 = 1.000)



Test 2a-2e: Total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          432         
=&gt; passed       64         2672         
=&gt; passed      256        10352         
=&gt; passed     1024        41072         
=&gt; passed     4096       163952         
==&gt; 5/5 tests passed

Memory after adding N = 2^i + 1 items: 40.00 N + 72.00  (R^2 = 1.000)



Test 3a-3e: Total memory usage after inserting 2N+1 items,
            and then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          432         
=&gt; passed       64         2672         
=&gt; passed      256        10352         
=&gt; passed     1024        41072         
=&gt; passed     4096       163952         
==&gt; 5/5 tests passed

Memory: 40.00 N + 72.00  (R^2 = 1.000)



Test 4a-4e: Total memory usage after inserting N items,
            and then deleting all but one item.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=&gt; passed        8          112         
=&gt; passed       64          112         
=&gt; passed      256          112         
=&gt; passed     1024          112         
=&gt; passed     4096          112         
==&gt; 5/5 tests passed

Memory after adding N = 2^i items: 112.00  (R^2 = 1.000)



Test 5a-5e: Total memory usage of iterator after inserting N items.
            (should not grow with N or be too large of a constant)

                 N        bytes
----------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>        8          120   (1.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>       64          568   (8.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>      256         2104  (32.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>     1024         8248 (128.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>     4096        32824 (512.9x)
==&gt; 0/5 tests passed

Memory of iterator after adding N = 2^i items: 8.00 N + 56.00  (R^2 = 1.000)



Test 6: check for loitering by adding 100 strings and deleting them.
==&gt; passed

Test 7: Worst-case constant memory allocated or deallocated
        per deque operation?
  *  T = 128 random operations
  *  T = 256 random operations
  *  T = 512 random operations
==&gt; passed

Total: 22/27 tests passed!

================================================================



Computing memory of RandomizedQueue
*-----------------------------------------------------------
Running 22 total tests.

Test 1a-1d: Total memory usage after inserting N integers.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          568         
=&gt; passed      256         2104         
=&gt; passed     1024         8248         
=&gt; passed     4096        32824         
==&gt; 4/4 tests passed


Memory: 8.00 N + 56.00  (R^2 = 1.000)



Test 2a-2d: Total memory usage after inserting N+1 items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         1080         
=&gt; passed      256         4152         
=&gt; passed     1024        16440         
=&gt; passed     4096        65592         
==&gt; 4/4 tests passed


Memory: 16.00 N + 40.00  (R^2 = 1.000)



Test 3a-3d: Total memory usage after inserting 2N+1 items, and
            then deleting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64         2104         
=&gt; passed      256         8248         
=&gt; passed     1024        32824         
=&gt; passed     4096       131128         
==&gt; 4/4 tests passed


Memory: 32.00 N + 24.00  (R^2 = 1.000)



Test 4a-4d: Total memory usage after inserting N items, and
            then deleting all but one item.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64           72         
=&gt; passed      256           72         
=&gt; passed     1024           72         
=&gt; passed     4096           72         
==&gt; 4/4 tests passed


Memory: 72.00  (R^2 = 1.000)



Test 5a-5d: Total memory usage of iterator after inserting N items.

                 N        bytes
----------------------------------------------------------
=&gt; passed       64          568         
=&gt; passed      256         2104         
=&gt; passed     1024         8248         
=&gt; passed     4096        32824         
==&gt; 4/4 tests passed


Memory: 8.00 N + 56.00  (R^2 = 1.000)



Test 6: Checking for loitering by adding 100 strings and deleting them.
==&gt; passed

Test 7: Insert T items into queue; then iterate over queue and check that
worst-case constant memory is allocated or deallocated per
iterator operation?
  *  T = 64
  *  T = 128
  *  T = 256
==&gt; passed

Total: 22/22 tests passed!

================================================================



******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Subset
*-----------------------------------------------------------
Running 2 total tests.

Test 1: Check that only one Deque or RandomizedQueue object is created
  * filename = subset9.txt, N = 9, k = 1
  * filename = subset9.txt, N = 9, k = 2
  * filename = subset9.txt, N = 9, k = 4
  * filename = tinyTale.txt, N = 12, k = 10
  * filename = tale.txt, N = 138653, k = 50
==&gt; passed

Test 2: Check that the maximum size of any Deque or RandomizedQueue object
        created is &lt;= N
  * filename = subset9.txt, N = 9, k = 1
  * filename = subset9.txt, N = 9, k = 2
  * filename = subset9.txt, N = 9, k = 4
  * filename = tinyTale.txt, N = 12, k = 10
  * filename = tale.txt, N = 138653, k = 5
  * filename = tale.txt, N = 138653, k = 50
  * filename = tale.txt, N = 138653, k = 500
  * filename = tale.txt, N = 138653, k = 5000
  * filename = tale.txt, N = 138653, k = 50000
==&gt; passed

Test 3 (bonus): Check that maximum size of any or Deque or RandomizedQueue object
                created is &lt;= k
  * filename = tale.txt, N = 138653, k = 5
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 500
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 5000
    - max size of RandomizedQueue object = 138653
  * filename = tale.txt, N = 138653, k = 50000
    - max size of RandomizedQueue object = 138653
==&gt; <font color="#990000"><b>FAILED</b></font>

Total: 2/2 tests passed!

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Deque
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: addFirst(), addLast(), removeFirst(), and removeLast()

                    N  seconds
------------------------------
=&gt; passed        1024     0.01
=&gt; passed        4096     0.02
=&gt; passed       16384     0.02
=&gt; passed      128000     0.07
=&gt; passed      256000     0.12
=&gt; passed     1024000     0.56
==&gt; 6/6 tests passed


N random calls to next() and hasNext() in iterator()

                    N  seconds
------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.00
=&gt; passed       16384     0.00
=&gt; passed      128000     0.00
=&gt; passed      256000     0.01
=&gt; passed     1024000     0.50
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



Timing RandomizedQueue
*-----------------------------------------------------------
Running 12 total tests.

N random calls to: enqueue(), sample(), dequeue(), isEmpty(), and size()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.02
=&gt; passed       16384     0.03
=&gt; passed      128000     0.03
=&gt; passed      256000     0.13
=&gt; passed     1024000     0.51
==&gt; 6/6 tests passed


N random calls to: next() and hasNext() from iterator()

                    N  seconds
----------------------------------
=&gt; passed        1024     0.00
=&gt; passed        4096     0.01
=&gt; passed       16384     0.00
=&gt; passed      128000     0.01
=&gt; passed      256000     0.08
=&gt; passed     1024000     0.22
==&gt; 6/6 tests passed

Total: 12/12 tests passed!
================================================================



</pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-04-Oct 20:52:44</td></tr>
        <tr><td>Raw Score</td><td>0.00 / 100.00</td></tr>
                <tr><td>Feedback</td><td><pre>Compilation:  <font color="#009900">PASSED</font>

API:          <font color="#990000">FAILED</font>
<pre>Deque:<p>

The following fields should be made private:
  *  java.util.LinkedList&lt;Item&gt; data


</p></pre></pre> </td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-04-Oct 20:05:36</td></tr>
        <tr><td>Raw Score</td><td>0.00 / 100.00</td></tr>
                <tr><td>Feedback</td><td><pre>Compilation:  <font color="#990000">FAILED</font>
Missing file: Subset.java
</pre> </td></tr>
    </tbody>
</table>

</div></div></div></div></div><div class="coursera-footer"></div></div></div></div><!--[if gte IE 8]><script>document.getElementById("coursera-loading-js").style.display = 'block';</script><![endif]-->
<!--[if lte IE 7]><script>document.getElementById("coursera-loading-nojs").style.display = 'block';
window._204 = window._204 || [];
window._gaq = window._gaq || [];

window._gaq.push(
    ['_setAccount', 'UA-28377374-1'],
    ['_setDomainName', window.location.hostname],
    ['_setAllowLinker', true],
    ['_trackPageview', window.location.pathname]);
    
window._204.push(
  ['client', 'home'],
  {key:"pageview", value:window.location.pathname});
  </script><script src="https://dw0ugk4msqulk.cloudfront.net/c5b8e4b1e4a9a5c36209c8b814c7c68eddcbb361/js/lib/204.js"></script><script src="https://ssl.google-analytics.com/ga.js"></script><![endif]-->
<!--[if !IE]> --><script>document.getElementById("coursera-loading-js").style.display = 'block';</script><!-- <![endif]-->
<script src="Assignment%20Results%20_%20Coursera_files/require.js"></script><script data-baseurl="https://dw0ugk4msqulk.cloudfront.net/c5b8e4b1e4a9a5c36209c8b814c7c68eddcbb361/" data-version="c5b8e4b1e4a9a5c36209c8b814c7c68eddcbb361" data-timestamp="1412371724295" data-debug="0" data-locale="en_US" id="_require">if(document.getElementById("coursera-loading-js").style.display == 'block') {
  (function(el) {
     require.config({
       //enforceDefine: true,
       waitSeconds: 75,
       baseUrl: el.getAttribute("data-baseurl"),
       urlArgs: el.getAttribute("data-debug") == "1" ? "v=" + el.getAttribute("data-timestamp") : "",
       shim: {
          'underscore': {
             exports: '_'
          },
          'backbone': {
             deps: ['underscore', 'jquery'],
             exports: 'Backbone',
             init: function(_, $) {
               Backbone.$ = $;
               return Backbone;
             }
          },
          'pages/hg/thirdparty/js/backbone.marionette': {
            deps: ["backbone"]
          },
          'pages/hg/thirdparty/js/webshims/polyfiller': {
            deps: ["jquery"]
          },
          'pages/hg/thirdparty/js/webshims/extras/mousepress': {
            deps: ["jquery", "pages/hg/thirdparty/js/webshims/polyfiller"]
          },
          'pages/hg/thirdparty/js/jquery.throttle': {
            deps: ["jquery"]
          },
          'js/lib/jquery.linkify': {
            deps: ["jquery"]
          },
          'pages/hg/thirdparty/js/js/bootstrap/alert': {
            deps: ["jquery", "pages/hg/thirdparty/js/bootstrap/transition"]
          },
          'spark/core/js/jquery_ui': {
            deps: ["jquery"]
          },
          'spark/core/js/jquery.history': {
            deps: ["jquery"]
          },
          'js/lib/bootstrap.tooltip': {
            deps: ["jquery"]
          },
          'pages/hg/thirdparty/js/bootstrap/transition': {
            deps: ["jquery"]
          },
          'pages/hg/thirdparty/js/bootstrap/tab': {
            deps: ["jquery"]
          },
          'bundles/videojs/lib/video.4.3.0': {
            exports: 'vjs'
          }
       },
       paths: {
          "jquery":                         "pages/spark/jquery",
          "underscore":                     "js/core/underscore.1.5.2",
          "backbone":                       "js/core/backbone.1.1.0",
          "backbone.relational":            "js/lib/backbone.relational.0.8.6",
          "i18n":                           "js/core/i18n._t",
          "css":                            "js/vendor/require.css.v0-1-2",
          "memoize":                        "js/lib/require.memoize.v0-0-1",
          "pages/spark/models/user.json":   "empty:",
          "pages/spark/models/course.json": "empty:",
          "pages/spark/models/navbar.json": "empty:"
       },
       callback: function() {
                    require(["pages/spark/routes"]);
                },
       config: {
         i18n: {
           locale: (window.localStorage ? localStorage.getItem('locale') : '') || el.getAttribute('data-locale')
         }
       }
     });
  })(document.getElementById("_require"));
}
</script><script>define("pages/spark/models/user.json", [], function(){
      return JSON.parse("{\"id\":1350958,\"email_address\":\"sudarshan.sarolkar@gmail.com\",\"full_name\":\"Sudarshan S\",\"locale\":\"en_US\",\"timezone\":\"America\\\/Los_Angeles\",\"access_group_id\":\"4\",\"registration_time\":\"1410627231\",\"last_access_time\":\"1411279181\",\"last_access_ip\":\"76.126.117.243\",\"signature_track_register_time\":\"0\",\"email_announcement\":\"1\",\"email_forum\":\"1\",\"in_signature_track\":\"0\",\"wishes_proctored_exam\":\"0\",\"first_name\":\"Sudarshan\",\"permissions\":[\"default\",\"allow_site_access\"],\"group\":\"Student\",\"anonymous\":false,\"forum_title\":\"Student\",\"signature_track_state\":1,\"verified_quizzes\":[],\"submitted_quizzes\":[],\"scheduled_proctored_exam\":null,\"last_chance_modal\":null,\"flexjoin_last_chance_modal\":null}");
  });
define("pages/spark/models/course.json", [], function(){
      return JSON.parse("{\"id\":972715,\"isPrivate\":false,\"type\":\"public\",\"name\":\"Algorithms, Part I\",\"instructor\":\"Kevin Wayne, Robert Sedgewick\",\"sessionName\":\"algs4partI-006\",\"externalBaseURL\":\"https:\\\/\\\/www.coursera.org\\\/\",\"shortname\":\"algs4partI\",\"host\":\"https:\\\/\\\/www.coursera.org\\\/\",\"assetUnversionedLink\":\"https:\\\/\\\/dw0ugk4msqulk.cloudfront.net\\\/\",\"cheggID\":\"\",\"hasLTI\":true,\"badgevilleDomain\":\"\",\"linkable\":false,\"universityShortname\":\"princeton\",\"signatureTrackStatus\":{\"signature_track_enabled\":0},\"courseURLs\":{\"log_in_link\":\"https:\\\/\\\/accounts.coursera.org\\\/signin?post_redirect=https%3A%2F%2Faccounts.coursera.org%2Fsignin%3Fuser_action%3Dclass%26course_id%3D972715%26post_redirect%3Dhttps%253A%252F%252Fclass.coursera.org%252Falgs4partI-006%252Fauth%252Fauth_redirector%253Ftype%253Dlogin%2526subtype%253Dnormal%2526visiting%253D\",\"sign_up_link\":\"https:\\\/\\\/accounts.coursera.org\\\/signup?enroll_cid=972715&enroll_sn=algs4partI&enroll_n=Algorithms, Part I\",\"view_course_info_link\":\"https:\\\/\\\/www.coursera.org\\\/course\\\/algs4partI\",\"sign_up_link_cant_enroll\":\"https:\\\/\\\/accounts.coursera.org\\\/signup?post_redirect=https%3A%2F%2Fwww.coursera.org%2Fcourse%2Falgs4partI\"},\"courseBase\":\"https:\\\/\\\/class.coursera.org\\\/algs4partI-006\\\/\",\"search\":true,\"hideWiki\":true,\"hideMeetup\":false,\"aceStartRegistrationDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceEndRegistrationDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamStartDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamEndDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamRules\":\"\",\"aceExamDuration\":\"\",\"aceBeforeExam\":false,\"aceAfterExam\":true,\"aceHours\":null,\"aceCreditType\":\"\",\"acePrice\":null,\"aceExamID\":null,\"aceEligible\":false,\"canRegisterForACE\":false,\"specialization\":null,\"supportForums\":true,\"textbooks\":\"\",\"inVideoQuizV2\":false,\"in_flexjoin\":0,\"honorCodeExtraText\":\"I will not to post solutions or partial solutions to the programming assignments publicly (e.g., in the discussion forums or in public code repositories such as GitHub).\",\"honorCodeCustomTitle\":\"\",\"honorCodeCustomButton\":\"\",\"studentAccessDisabled\":0}");
  });
  define("pages/spark/models/navbar.json", [], function(){
      return JSON.parse("{\"items\":[{\"name\":\"Home\",\"icon\":\"home\",\"link_type\":\"circuit\",\"link_data\":\"class:index\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Syllabus\",\"icon\":\"wiki\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=syllabus\"},{\"name\":\"Schedule\",\"icon\":\"wiki\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=schedule\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Lectures\",\"icon\":\"lecture\",\"link_type\":\"circuit\",\"link_data\":\"lecture:index\"},{\"name\":\"Exercises\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index\"},{\"name\":\"Programming Assignments\",\"icon\":\"assignment\",\"link_type\":\"circuit\",\"link_data\":\"assignment:index\"},{\"name\":\"Job Interview Questions\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index?quiz_type=homework\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Discussion Forums\",\"icon\":\"forum\",\"link_type\":\"circuit\",\"link_data\":\"forum:index\"},{\"name\":\"Google+ Hangouts\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=ScheduleGoogleHangouts\"},{\"name\":\"Errata\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=errata\"},{\"name\":\"Surveys\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index?quiz_type=survey\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Booksite\",\"icon\":\"wiki\",\"link_type\":\"window_link\",\"link_data\":\"http:\\\/\\\/algs4.cs.princeton.edu\"}]}");
  });
</script><script>var coursera_enable_new_help_center = false;
</script><div class="hide confirm-navigation modal"><div class="modal-header"><h3>Confirm Navigation</h3></div><div class="modal-body"><div class="confirm-navigation-message"></div><div>Are you sure you want to leave this page?</div></div><div class="modal-footer"><button data-modal-close="data-modal-close" class="btn confirm-navigation-stay">Stay on this Page</button><button data-modal-close="data-modal-close" class="btn btn-danger confirm-navigation-leave">Leave this Page</button></div></div><div style="display: none;" class="coursera-async-message"></div></body></html>
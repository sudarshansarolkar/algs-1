<!DOCTYPE html>
<html class="supports-svg" xmlns:fb="http://ogp.me/ns/fb#" itemtype="http://schema.org"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=IE7"><meta name="fragment" content="!"><meta name="robots" content="NOODP"><meta charset="utf-8"><meta property="og:title" content="Coursera"><meta property="og:type" content="website"><meta property="og:image" content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png"><meta property="og:url" content="https://www.coursera.org/assignment/part_results?part_id=9"><meta property="og:site_name" content="Coursera"><meta property="og:locale" content="en_US"><meta property="og:description" content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits."><meta property="fb:admins" content="727836538,4807654"><meta property="fb:app_id" content="274998519252278"><meta name="twitter:site" content="Coursera"><meta name="twitter:app:name:iphone" content="Coursera"><meta name="twitter:app:name:ipad" content="Coursera"><meta name="twitter:app:name:googleplay" content="Coursera"><meta name="twitter:app:id:iphone" content="id736535961"><meta name="twitter:app:id:ipad" content="id736535961"><meta name="twitter:app:id:googleplay" content="org.coursera.android"><meta name="description" content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits."><meta name="image" content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png"><meta name="apple-itunes-app" content="app-id=736535961"><title>Assignment Results | Coursera</title>    <link href="Assignment%20Results%20_%20Coursera_files/spark.css" rel="stylesheet" type="text/css">
      <link href="Assignment%20Results%20_%20Coursera_files/course.css" rel="stylesheet" type="text/css">
    <link href="https://spark-public.s3.amazonaws.com/algs4partI/static/images/favicon.ico" rel="icon">
<script src="Assignment%20Results%20_%20Coursera_files/ga.js" async="" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/routes.js" data-requiremodule="pages/spark/routes" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><meta content="summary" name="twitter:card"><meta content="Coursera" name="twitter:title"><meta content="Take free online classes from 80+ top universities and organizations. Coursera is a social entrepreneurship company partnering with Stanford University, Yale University, Princeton University and others around the world to offer courses online for anyone to take, for free. We believe in connecting people to a great education so that anyone around the world can learn without limits." name="twitter:description"><meta content="http://s3.amazonaws.com/coursera/media/Coursera_Computer_Narrow.png" name="twitter:image:src"><script src="Assignment%20Results%20_%20Coursera_files/204.js" data-requiremodule="js/lib/204" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/400.js" data-requiremodule="js/lib/400" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/student-page.js" data-requiremodule="pages/spark/views/template/student-page" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/student-page_003.js" data-requiremodule="pages/spark/views/template/student-page.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/sparkSurveyQuestionsSessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/sparkSurveyQuestions/sparkSurveyQuestionsSessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/sessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/quickQuestions/sessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/student-page_002.js" data-requiremodule="pages/spark/views/template/nls/student-page" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/SessionModel.js" data-requiremodule="bundles/assess/assessmentTypes/SessionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/QuestionCollection.js" data-requiremodule="bundles/assess/framework/QuestionCollection" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/QuestionModel.js" data-requiremodule="bundles/assess/framework/QuestionModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/backbone.js" data-requiremodule="bundles/assess/lib/backbone.hascollections" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/underscore.js" data-requiremodule="js/lib/underscore.extend" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/header_002.js" data-requiremodule="pages/spark/views/template/header" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/sidebar_003.js" data-requiremodule="pages/spark/views/template/sidebar" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/readme.js" data-requiremodule="js/lib/readme" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/header_003.js" data-requiremodule="pages/spark/views/template/header.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/LearnerStoriesCollection.js" data-requiremodule="pages/analytics/models/LearnerStoriesCollection" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/assessApi.js" data-requiremodule="pages/spark-survey/assessApi" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/sidebar_002.js" data-requiremodule="pages/spark/views/template/sidebar.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/signature_track.js" data-requiremodule="spark/app/signature/js/signature_track" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/HelpCenterLinks.js" data-requiremodule="pages/help-center/data/HelpCenterLinks" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/header.js" data-requiremodule="pages/spark/views/template/nls/header" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/sidebar.js" data-requiremodule="pages/spark/views/template/nls/sidebar" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/LearnerStoryModel.js" data-requiremodule="pages/analytics/models/LearnerStoryModel" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/jade.js" data-requiremodule="js/vendor/jade" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/signatureTrackLastChanceModal.js" data-requiremodule="spark/app/signature/js/signatureTrackLastChanceModal.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/flexjoinLastChanceModal.js" data-requiremodule="spark/app/signature/js/flexjoinLastChanceModal.html" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/util.js" data-requiremodule="js/lib/util" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="Assignment%20Results%20_%20Coursera_files/path.js" data-requiremodule="js/lib/path" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script></head><body><div id="fb-root"></div><div id="spark-help" class="hide"></div><a href="http://help.coursera.org/customer/widget/emails/new" target="_blank"><div style="z-index: 1" data-networkprioritysupportwidget="" role="button" class="helpwidget-tab hide">Premium Support</div></a><div id="origami"><div><div><div class="coursera-page"><div class="coursera-header" role="menubar"><div class="hidden">This page features MathJax technology to render mathematical formulae.
If you are using a screen reader, please visit <a href="http://www.dessci.com/en/products/mathplayer/">MathPlayer</a> to download the plugin for your browser. Please note that this is an Internet Explorer-only plugin at this time.</div><h1 class="hidden">Algorithms, Part I</h1><!-- UNTIL dashboard announcement expires 2014-08-31 (then delete this code)--><div role="banner" class="course-topbar container-fluid"><div class="row-fluid"><div class="span3"><a href="https://www.coursera.org/" data-if-linkable="add-referrer" class="course-topbar-logo"></a></div><div style="float:right;" class="course-topbar-nav-container span9"><h2 class="hidden">Top Navigation Bar</h2><ul class="course-topbar-nav-list"><li class="course-topbar-nav-list-item"><a href="https://www.coursera.org/courses" data-if-linkable="add-referrer">Courses</a></li><li tabindex="0" role="button" aria-haspopup="true" aria-expanded="false" aria-owns="course-topbar-my" data-popup="#course-topbar-my" data-popup-bind-open="mouseenter" data-popup-close="data-popup-close" style="cursor:pointer;" data-popup-direction="se" class="course-topbar-nav-list-item"><a data-user-id="1350958">Sudarshan S<i class="icon-caret-down"></i></a></li></ul></div></div><div id="course-topbar-aboutus" class="course-topbar-sublist"><a href="https://www.coursera.org//about/" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">About Us</a><a href="https://www.coursera.org//about/careers" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">Careers</a><a href="https://www.coursera.org//about/people" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">People</a><a href="https://www.coursera.org//about/contact" target="_new" data-if-linkable="add-referrer" class="internal-about course-topbar-sublist-item">Contact Us</a></div><div id="course-topbar-my" class="course-topbar-sublist"><a data-popup-close="data-popup-close" href="https://www.coursera.org/" target="_new" class="course-topbar-sublist-item">My Courses</a><a data-popup-close="data-popup-close" href="https://www.coursera.org/account/profile" target="_new" class="course-topbar-sublist-item">Profile</a><a data-popup-close="data-popup-close" href="https://www.coursera.org/account/records" target="_new" class="course-topbar-sublist-item">Course Records</a><a href="https://www.coursera.org/account/settings" target="_new" class="course-topbar-sublist-item">Settings</a><a href="https://class.coursera.org/algs4partI-006/class/preferences" class="course-topbar-sublist-item">Course Preferences</a><a href="https://class.coursera.org/algs4partI-006/auth/logout" class="course-topbar-sublist-item">Sign Out</a></div></div><div class="course-topbanner-wrapper"><div class="course-topbanner"><div class="course-topbanner-university-logo"><a href="https://www.coursera.org/princeton" target="_blank" data-if-linkable="add-referrer" title="https://www.coursera.org/princeton" class="coursera-university-color"><img src="Assignment%20Results%20_%20Coursera_files/university_logo.png" alt="princeton"></a></div><h1 class="course-topbanner-header"><a href="https://class.coursera.org/algs4partI-006/" data-if-linkable="modal-lock" class="course-topbanner-name coursera-university-color">Algorithms, Part I</a><br><span style="" class="course-topbanner-instructor">by Kevin Wayne, Robert Sedgewick</span></h1></div></div></div><div style="position:relative;" class="container-fluid"><div class="row-fluid"><div id="course-page-sidebar" role="navigation"><div class="coursera-sidebar" role="menubar"><div id="course-page-sidebar" role="navigation"><div class="course-navbar-container"><a href="https://class.coursera.org/algs4partI-006" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_index"><img src="Assignment%20Results%20_%20Coursera_files/logo.png" style="width: 205px;height: 116px;margin: -15px 0px 8px 1px; box-shadow: 0 1px 1px 0 rgba(0, 0, 0, 0.05);" alt="Course Home Page"></a><div data-coursera-course-search-nav-widget="data-coursera-course-search-nav-widget" class="input-append course-search-nav-box"><form method="get" action="/algs4partI-006/class/search" data-js-search-form="data-js-search-form" class="form-inline minimized-search"><label for="course-search-nav-input" class="accessible-text-for-reader">Search this course</label><input id="course-search-nav-input" name="q" data-js-search-input="data-js-search-input" type="text">&nbsp;<button type="submit" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="search" class="btn icon-search"><span class="accessible-text-for-reader">Search</span></button></form></div><h2 class="hidden">Side Navigation Bar</h2><ul class="course-navbar-list"><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/class/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Home" class="coursera-university-color"><span>Home </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/wiki/view?page=syllabus" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Syllabus" class="coursera-university-color"><span>Syllabus </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/wiki/view?page=schedule" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Schedule" class="coursera-university-color"><span>Schedule </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/lecture/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Lectures" class="coursera-university-color"><span>Lectures </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/quiz/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Exercises" class="coursera-university-color"><span>Exercises </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/assignment/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Programming_Assignments" class="coursera-university-color"><span>Programming Assignments </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/quiz/index?quiz_type=homework" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Job_Interview_Questions" class="coursera-university-color"><span>Job Interview Questions </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/forum/index" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Discussion_Forums" class="coursera-university-color"><span>Discussion Forums </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/wiki/view?page=ScheduleGoogleHangouts" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Google+_Hangouts" class="coursera-university-color"><span>Google+ Hangouts </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/wiki/view?page=errata" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Errata" class="coursera-university-color"><span>Errata </span><span></span></a></li><li class="course-navbar-item"><a href="https://class.coursera.org/algs4partI-006/quiz/index?quiz_type=survey" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Surveys" class="coursera-university-color"><span>Surveys </span><span></span></a></li><li class="course-navbar-item"></li><li class="course-navbar-item"><a href="http://algs4.cs.princeton.edu/" target="_blank" data-if-linkable="modal-lock,gray,lock-icon" data-ab-user-convert-for="honorcode_to_welcome2" data-ab-user-convert="navclick_Booksite" class="coursera-university-color"><span>Booksite </span><span class="icon-share"></span><span class="accessible-text-for-reader">opens in new browser tab</span></a></li><li class="course-navbar-item"><a href="http://www.meetup.com/Coursera/" target="_blank" class="coursera-university-color">Join a Meetup<span class="icon-share"></span><span class="accessible-text-for-reader">opens in new browser tab</span></a></li></ul><ul style="list-style-type:none;margin-left: 10px;"><li><a href="http://help.coursera.org/" target="_blank" title="Open help articles in new window" class="coursera-university-color"><i class="icon-question-sign"></i>Help Articles</a></li></ul><ul style="list-style-type:none;margin-left: 10px;"><li><a href="https://class.coursera.org/algs4partI-006/forum/list?forum_id=10000&amp;url=https%3A%2F%2Fclass.coursera.org%2Falgs4partI-006%2Fassignment%2Fpart_results%3Fpart_id%3D9" class="coursera-university-color"><i class="icon-comments"></i>Course Materials Errors</a></li><li><a href="https://class.coursera.org/algs4partI-006/forum/list?forum_id=10001&amp;url=https%3A%2F%2Fclass.coursera.org%2Falgs4partI-006%2Fassignment%2Fpart_results%3Fpart_id%3D9" class="coursera-university-color"><i class="icon-comments"></i>Technical Issues</a></li></ul></div></div></div></div><div id="course-page-content" role="main"><div style="display: block;" id="spark" class="hide"><h2 class="course-page-header">Programming Assignment 4:  8 Puzzle | 8puzzle.zip
  <a class="coursera-reporter-link" title="Click here if you're experiencing technical problems or found errors in the course materials." target="_blank" href="https://class.coursera.org/algs4partI-006/help/programming?url=https%3A%2F%2Fclass.coursera.org%2Falgs4partI-006%2Fassignment%2Fpart_results%3Fpart_id%3D9">
     Help
  </a>
</h2>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-11-Oct 08:45:31</td></tr>
        <tr><td>Raw Score</td><td>100.00 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#009900">No potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#009900">27/27 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#009900">17/17 tests passed</font>

Aggregate score: <font color="#009900">100.00%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 20K
-rw-r--r-- 1 8.1K Oct 11 15:40 Board.java
-rw-r--r-- 1 3.8K Oct 11 15:40 Solver.java
-rw-r--r-- 1 3.0K Oct 11 15:40 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 18 total tests.

Tests 6-9 and 17-18 rely upon toString() returning a board in the prescribed format.

Test 1: Test hamming() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2: Test hamming() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 4: Test manhattan() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 5: Test dimension() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==&gt; passed

Test 6: Test toString() with file inputs to ensure that it outputs boards in the correct format
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 7: Test neighbors() with file inputs to ensure that the correct neighbor board are generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 8: Test neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 9: Test twin() with file inputs to ensure that a correct twin is generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 10: Test twin() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 11: Test isGoal() on file inputs
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-00.txt
  *  puzzle4x4-00.txt
==&gt; passed

Test 12: Test isGoal() on N-by-N goal boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  6-by-6
  *  100-by-100
==&gt; passed

Test 13: Check whether two Board objects can be created at the same time and still correctly function
  *   random boards of size 3-by-3 and 3-by-3
  *   random boards of size 4-by-4 and 4-by-4
  *   random boards of size 2-by-2 and 2-by-2
  *   random boards of size 3-by-3 and 4-by-4
  *   random boards of size 4-by-4 and 3-by-3
==&gt; passed

Test 14: Check equals()
  *  reflexive
  *  symmetric
  *  checks that individual entries of array are equal
  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==&gt; passed

Test 15: Check that Board is immutable by changing argument 2d array after construction
         and making sure Board does not change
==&gt; passed

Test 16: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle10.txt
  *  puzzle20.txt
  *  puzzle30.txt
  *  2-by-2
  *  3-by-3
  *  4-by-4
==&gt; passed

Test 17: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed

Test 18: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed


Total: 18/18 tests passed!

================================================================

******************************************************************************
*  correctness (substituting reference Board.java)
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==&gt; passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==&gt; passed

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==&gt; passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==&gt; passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 8: Check that Solver is immutable by comparing the results of two calls
        each to moves(), isSolvable(), and solution(). The results of these
        two consecutive calls must match.
==&gt; passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==&gt; passed


Total: 9/9 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; passed     4           256                  248
=&gt; passed     8           576                  568
=&gt; passed    12          1024                 1016
=&gt; passed    16          1600                 1592
=&gt; passed    20          2304                 2296
=&gt; passed    36          6400                 6392
=&gt; passed    72         23104                23096
=&gt; passed   120         61504                61496
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 N^2 + 32.00 N + 64.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 15 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
=&gt; passed  puzzle20.txt   3     0.08       1521                 896                 625         
=&gt; passed  puzzle21.txt   3     0.06       2750                1614                1136         
=&gt; passed  puzzle22.txt   3     0.06       3095                1832                1263         
=&gt; passed  puzzle23.txt   3     0.05       5373                3188                2185         
=&gt; passed  puzzle24.txt   3     0.04       6494                3940                2554         
=&gt; passed  puzzle25.txt   3     0.05      11096                6578                4518         
=&gt; passed  puzzle26.txt   3     0.02       5344                3188                2156         
=&gt; passed  puzzle27.txt   3     0.05       9967                6042                3925         
=&gt; passed  puzzle28.txt   3     0.13      24032               14374                9658         
=&gt; passed  puzzle29.txt   3     0.09      24637               14816                9821         
=&gt; passed  puzzle30.txt   3     0.17      41871               25162               16709         
=&gt; passed  puzzle31.txt   3     0.12      53463               32504               20959         
=&gt; passed  puzzle34.txt   4     1.23     254207              121658              132549         
=&gt; passed  puzzle37.txt   4     0.42     157835               76214               81621         
=&gt; passed  puzzle39.txt   4     0.54     152669               74156               78513         
=&gt; passed  puzzle41.txt   5     0.21      76614               32946               43668         
=&gt; passed  puzzle44.txt   5     1.00     311113              138176              172937         
==&gt; 17/17 tests passed

Total: 17/17 tests passed!

================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Sat-11-Oct 08:36:15</td></tr>
        <tr><td>Raw Score</td><td>97.59 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#059900">26/27 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#009900">17/17 tests passed</font>

Aggregate score: <font color="#039900">97.59%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 8.0K Oct 11 15:32 Board.java
-rw-r--r-- 1 3.8K Oct 11 15:32 Solver.java
-rw-r--r-- 1 3.0K Oct 11 15:32 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: new Board(int[][]) may expose internal representation by storing an externally mutable object into blocks  At Board.java:[line 10]
Warnings generated: 1
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 18 total tests.

Tests 6-9 and 17-18 rely upon toString() returning a board in the prescribed format.

Test 1: Test hamming() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2: Test hamming() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 4: Test manhattan() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 5: Test dimension() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==&gt; passed

Test 6: Test toString() with file inputs to ensure that it outputs boards in the correct format
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 7: Test neighbors() with file inputs to ensure that the correct neighbor board are generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 8: Test neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 9: Test twin() with file inputs to ensure that a correct twin is generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 10: Test twin() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 11: Test isGoal() on file inputs
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-00.txt
  *  puzzle4x4-00.txt
==&gt; passed

Test 12: Test isGoal() on N-by-N goal boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  6-by-6
  *  100-by-100
==&gt; passed

Test 13: Check whether two Board objects can be created at the same time and still correctly function
  *   random boards of size 3-by-3 and 3-by-3
  *   random boards of size 4-by-4 and 4-by-4
  *   random boards of size 2-by-2 and 2-by-2
  *   random boards of size 3-by-3 and 4-by-4
  *   random boards of size 4-by-4 and 3-by-3
==&gt; passed

Test 14: Check equals()
  *  reflexive
  *  symmetric
  *  checks that individual entries of array are equal
  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==&gt; passed

Test 15: Check that Board is immutable by changing argument 2d array after construction
         and making sure Board does not change
==&gt; passed

Test 16: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle10.txt
     -  failed after 6 calls to random methods in Board
     -  first call to student twin() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 14 13 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  last  call to student twin() =
        9
         1  2  3  4  5  6  7  8  9 
        10 12 11 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  twin1.equals(twin2) = false
  *  puzzle20.txt
     -  failed after 2 calls to random methods in Board
     -  first call to student twin() =
        3
         1  4  6 
         7  0  8 
         2  3  5 

     -  last  call to student twin() =
        3
         1  6  4 
         7  0  8 
         3  2  5 

     -  twin1.equals(twin2) = false
  *  puzzle30.txt
     -  failed after 28 calls to random methods in Board
     -  first call to student twin() =
        3
         8  4  7 
         5  1  6 
         3  2  0 

     -  last  call to student twin() =
        3
         8  7  4 
         1  5  6 
         3  2  0 

     -  twin1.equals(twin2) = false
  *  2-by-2
  *  3-by-3
     -  failed after 14 calls to random methods in Board
     -  first call to student twin() =
        3
         3  8  7 
         2  6  1 
         4  0  5 

     -  last  call to student twin() =
        3
         8  7  3 
         2  6  1 
         4  0  5 

     -  twin1.equals(twin2) = false
     -  Failed on trial 1 of 100

  *  4-by-4
     -  failed after 6 calls to random methods in Board
     -  first call to student twin() =
        4
        15  7  0 12 
        10  6 14  3 
         8 13  5  9 
         1  4  2 11 

     -  last  call to student twin() =
        4
        15  7  0 12 
        10 14  6  3 
        13  8  5  9 
         1  4  2 11 

     -  twin1.equals(twin2) = false
     -  Failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 17: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed

Test 18: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed


Total: 17/18 tests passed!

================================================================

******************************************************************************
*  correctness (substituting reference Board.java)
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==&gt; passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==&gt; passed

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==&gt; passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==&gt; passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 8: Check that Solver is immutable by comparing the results of two calls
        each to moves(), isSolvable(), and solution(). The results of these
        two consecutive calls must match.
==&gt; passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==&gt; passed


Total: 9/9 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; passed     4           248                  248
=&gt; passed     8           568                  568
=&gt; passed    12          1016                 1016
=&gt; passed    16          1592                 1592
=&gt; passed    20          2296                 2296
=&gt; passed    36          6392                 6392
=&gt; passed    72         23096                23096
=&gt; passed   120         61496                61496
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 15 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
=&gt; passed  puzzle20.txt   3     0.08       1521                 896                 625         
=&gt; passed  puzzle21.txt   3     0.06       2757                1614                1143         
=&gt; passed  puzzle22.txt   3     0.05       3100                1832                1268         
=&gt; passed  puzzle23.txt   3     0.04       5373                3188                2185         
=&gt; passed  puzzle24.txt   3     0.04       6480                3940                2540         
=&gt; passed  puzzle25.txt   3     0.05      11081                6578                4503         
=&gt; passed  puzzle26.txt   3     0.02       5293                3188                2105         
=&gt; passed  puzzle27.txt   3     0.05      10025                6042                3983         
=&gt; passed  puzzle28.txt   3     0.07      23985               14374                9611         
=&gt; passed  puzzle29.txt   3     0.06      24616               14816                9800         
=&gt; passed  puzzle30.txt   3     0.09      41630               25162               16468         
=&gt; passed  puzzle31.txt   3     0.12      53553               32504               21049         
=&gt; passed  puzzle34.txt   4     0.75     254016              121658              132358         
=&gt; passed  puzzle37.txt   4     0.62     159002               76214               82788         
=&gt; passed  puzzle39.txt   4     0.42     150972               74156               76816         
=&gt; passed  puzzle41.txt   5     0.23      76919               32946               43973         
=&gt; passed  puzzle44.txt   5     1.76     311113              138176              172937         
==&gt; 17/17 tests passed

Total: 17/17 tests passed!

================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Fri-10-Oct 19:31:58</td></tr>
        <tr><td>Raw Score</td><td>70.19 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#0C9900">25/27 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#990000">0/17 tests passed</font>

Aggregate score: <font color="#409900">70.19%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 7.4K Oct 11 02:26 Board.java
-rw-r--r-- 1 3.7K Oct 11 02:26 Solver.java
-rw-r--r-- 1 2.8K Oct 11 02:26 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: new Board(int[][]) may expose internal representation by storing an externally mutable object into blocks  At Board.java:[line 8]
Warnings generated: 1
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 18 total tests.

Tests 6-9 and 17-18 rely upon toString() returning a board in the prescribed format.

Test 1: Test hamming() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2: Test hamming() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 4: Test manhattan() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 5: Test dimension() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==&gt; passed

Test 6: Test toString() with file inputs to ensure that it outputs boards in the correct format
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 7: Test neighbors() with file inputs to ensure that the correct neighbor board are generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 8: Test neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 9: Test twin() with file inputs to ensure that a correct twin is generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 10: Test twin() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 11: Test isGoal() on file inputs
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-00.txt
  *  puzzle4x4-00.txt
==&gt; passed

Test 12: Test isGoal() on N-by-N goal boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  6-by-6
  *  100-by-100
==&gt; passed

Test 13: Check whether two Board objects can be created at the same time and still correctly function
  *   random boards of size 3-by-3 and 3-by-3
  *   random boards of size 4-by-4 and 4-by-4
  *   random boards of size 2-by-2 and 2-by-2
  *   random boards of size 3-by-3 and 4-by-4
  *   random boards of size 4-by-4 and 3-by-3
==&gt; passed

Test 14: Check equals()
  *  reflexive
     - equals() is not reflexive
       failed on trial 1 of 100000
3
 5  0  6 
 8  2  4 
 3  1  7 

  *  symmetric
  *  checks that individual entries of array are equal
     - probably compares arrays with reference equality
       failed on trial 1 of 100000
3
 1  5  6 
 4  0  2 
 8  3  7 


3
 1  5  6 
 4  0  2 
 8  3  7 

  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 15: Check that Board is immutable by changing argument 2d array after construction
         and making sure Board does not change
==&gt; passed

Test 16: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle10.txt
     -  failed after 2 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55  0 57 58 59 60 61 62 63 
        64 56 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  neighbor 0 in last  call to neighbors() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55  0 57 58 59 60 61 62 63 
        64 56 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  board1.equals(board2) = false
  *  puzzle20.txt
     -  failed after 1 calls to random methods in Board
     -  first call to student twin() =
        3
         1  6  4 
         7  0  8 
         2  5  3 

     -  last  call to student twin() =
        3
         1  6  4 
         7  0  8 
         2  5  3 

     -  twin1.equals(twin2) = false
  *  puzzle30.txt
     -  failed after 11 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        3
         8  4  7 
         1  5  0 
         3  2  6 

     -  neighbor 0 in last  call to neighbors() =
        3
         8  4  7 
         1  5  0 
         3  2  6 

     -  board1.equals(board2) = false
  *  2-by-2
     -  failed after 2 calls to random methods in Board
     -  first call to student twin() =
        2
         1  3 
         2  0 

     -  last  call to student twin() =
        2
         1  3 
         2  0 

     -  twin1.equals(twin2) = false
     -  Failed on trial 1 of 100

  *  3-by-3
     -  failed after 2 calls to random methods in Board
     -  first call to student twin() =
        3
         4  5  1 
         3  2  0 
         7  8  6 

     -  last  call to student twin() =
        3
         4  5  1 
         3  2  0 
         7  8  6 

     -  twin1.equals(twin2) = false
     -  Failed on trial 1 of 100

  *  4-by-4
     -  failed after 1 calls to random methods in Board
     -  first call to student twin() =
        4
         6  0  9 10 
         5  1  2  7 
        15 14 12 13 
         8  4  3 11 

     -  last  call to student twin() =
        4
         6  0  9 10 
         5  1  2  7 
        15 14 12 13 
         8  4  3 11 

     -  twin1.equals(twin2) = false
     -  Failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 17: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed

Test 18: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed


Total: 16/18 tests passed!

================================================================

******************************************************************************
*  correctness (substituting reference Board.java)
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==&gt; passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==&gt; passed

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==&gt; passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==&gt; passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 8: Check that Solver is immutable by comparing the results of two calls
        each to moves(), isSolvable(), and solution(). The results of these
        two consecutive calls must match.
==&gt; passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==&gt; passed


Total: 9/9 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; passed     4           248                  248
=&gt; passed     8           568                  568
=&gt; passed    12          1016                 1016
=&gt; passed    16          1592                 1592
=&gt; passed    20          2296                 2296
=&gt; passed    36          6392                 6392
=&gt; passed    72         23096                23096
=&gt; passed   120         61496                61496
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 15 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle20.txt   3     0.28      14102   (2.7x)       5172   (1.7x)       8930   (4.2x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle21.txt   3     6.72    1120808  (47.4x)     402752  (28.8x)     718056  (74.0x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle22.txt   3     2.85     450416  (33.3x)     165726  (20.8x)     284690  (51.1x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle23.txt   3     6.64    1341243  (38.4x)     491834  (23.7x)     849409  (59.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle24.txt   3     0.08      52004   (1.6x)      19288               32716   (2.5x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle25.txt   3    17.09    1677251  (28.1x)     621316  (17.5x)    1055935  (43.5x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle26.txt   3     0.62     269207   (5.3x)     101512   (3.4x)     167695   (8.0x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle27.txt   3    14.52    1730084  (19.5x)     643710  (11.9x)    1086374  (31.4x)

Total: 0/17 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Fri-10-Oct 19:21:34</td></tr>
        <tr><td>Raw Score</td><td>65.37 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#1A9900">23/27 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#990000">0/17 tests passed</font>

Aggregate score: <font color="#519900">65.37%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 7.4K Oct 11 02:16 Board.java
-rw-r--r-- 1 3.7K Oct 11 02:16 Solver.java
-rw-r--r-- 1 2.8K Oct 11 02:16 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: new Board(int[][]) may expose internal representation by storing an externally mutable object into blocks  At Board.java:[line 8]
Warnings generated: 1
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 18 total tests.

Tests 6-9 and 17-18 rely upon toString() returning a board in the prescribed format.

Test 1: Test hamming() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2: Test hamming() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 4: Test manhattan() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 5: Test dimension() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==&gt; passed

Test 6: Test toString() with file inputs to ensure that it outputs boards in the correct format
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 7: Test neighbors() with file inputs to ensure that the correct neighbor board are generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 8: Test neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 9: Test twin() with file inputs to ensure that a correct twin is generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
     -  twin() doesn't return a twin
        4
         2  3  0  4 
         1 10  6  8 
         5  9  7 12 
        13 14 11 15 

  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 10: Test twin() with random N-by-N boards
  *  2-by-2
  *  3-by-3
     -  twin() doesn't return a twin
        3
         4  0  1 
         8  5  6 
         2  7  3 

     -  Failed on trial 4 of 1000

  *  4-by-4
     -  twin() doesn't return a twin
        4
         4  0  1 12 
         7 15  3  9 
         6 14 10  5 
         2 11  8 13 

     -  Failed on trial 13 of 1000

  *  5-by-5
     -  twin() doesn't return a twin
        5
        21  2 16  9 18 
        17 12  4  8  7 
         0  5 11 24 23 
        14 15 20 19 13 
         3 10  6 22  1 

     -  Failed on trial 3 of 1000

  *  9-by-9
     -  twin() doesn't return a twin
        9
        43 26 33  3 25 72 48 63 71 
        57 55 37 53 30 67 49 10 28 
         7 36 45 54 27 47 44 70 77 
         5 52 21  1  9 15 58 68 64 
        41 78 80  0 51 66 12 69  6 
        46 13  2 56 38 65 76 35 18 
        59 29 75 23 16 20 11  4 60 
        24 31 61 79 14 42 50 19 39 
        34 73 17 32 62 22 74  8 40 

     -  Failed on trial 60 of 1000

  *  10-by-10
     -  twin() doesn't return a twin
        10
        57 27 62  6 22 33 88 68 37 83 
         8 24 46 95  0 35 20 40 15 48 
        54  2 59 73 44 72  5 81 31 94 
        76 58 93 55 29  3 82 77 75 34 
        10 45 99 74 12 97  7 51 43 70 
        60 19 17 65 16 96 30  4 23 61 
        78 69 79 80 41 28 50 56 14 53 
        11 13 91 85 92 42 38 64 21  1 
        49 98 47 18 67 63 32 25 86 87 
        36 84 66 52 26 39 71 90 89  9 

     -  Failed on trial 1 of 1000

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 11: Test isGoal() on file inputs
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-00.txt
  *  puzzle4x4-00.txt
==&gt; passed

Test 12: Test isGoal() on N-by-N goal boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  6-by-6
  *  100-by-100
==&gt; passed

Test 13: Check whether two Board objects can be created at the same time and still correctly function
  *   random boards of size 3-by-3 and 3-by-3
  *   random boards of size 4-by-4 and 4-by-4
  *   random boards of size 2-by-2 and 2-by-2
  *   random boards of size 3-by-3 and 4-by-4
  *   random boards of size 4-by-4 and 3-by-3
==&gt; passed

Test 14: Check equals()
  *  reflexive
     - equals() is not reflexive
       failed on trial 1 of 100000
3
 0  8  7 
 2  3  4 
 1  6  5 

  *  symmetric
  *  checks that individual entries of array are equal
     - probably compares arrays with reference equality
       failed on trial 1 of 100000
3
 3  5  2 
 1  0  4 
 8  6  7 


3
 3  5  2 
 1  0  4 
 8  6  7 

  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 15: Check that Board is immutable by changing argument 2d array after construction
         and making sure Board does not change
==&gt; passed

Test 16: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle10.txt
     -  failed after 1 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55  0 57 58 59 60 61 62 63 
        64 56 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  neighbor 0 in last  call to neighbors() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55  0 57 58 59 60 61 62 63 
        64 56 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  board1.equals(board2) = false
  *  puzzle20.txt
     -  failed after 1 calls to random methods in Board
     -  first call to student twin() =
        3
         6  1  4 
         7  0  8 
         2  3  5 

     -  last  call to student twin() =
        3
         6  1  4 
         7  0  8 
         2  3  5 

     -  twin1.equals(twin2) = false
  *  puzzle30.txt
     -  failed after 2 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        3
         8  4  7 
         1  5  0 
         3  2  6 

     -  neighbor 0 in last  call to neighbors() =
        3
         8  4  7 
         1  5  0 
         3  2  6 

     -  board1.equals(board2) = false
  *  2-by-2
     -  failed after 10 calls to random methods in Board
     -  first call to student twin() =
        2
         3  2 
         1  0 

     -  last  call to student twin() =
        2
         3  2 
         1  0 

     -  twin1.equals(twin2) = false
     -  Failed on trial 1 of 100

  *  3-by-3
     -  failed after 6 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        3
         6  1  4 
         8  2  0 
         3  5  7 

     -  neighbor 0 in last  call to neighbors() =
        3
         6  1  4 
         8  2  0 
         3  5  7 

     -  board1.equals(board2) = false
     -  Failed on trial 1 of 100

  *  4-by-4
     -  failed after 2 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        4
         4  2 12 13 
         0 11  7  3 
        10 14  5  9 
         8  6  1 15 

     -  neighbor 0 in last  call to neighbors() =
        4
         4  2 12 13 
         0 11  7  3 
        10 14  5  9 
         8  6  1 15 

     -  board1.equals(board2) = false
     -  Failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 17: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed

Test 18: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed


Total: 14/18 tests passed!

================================================================

******************************************************************************
*  correctness (substituting reference Board.java)
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==&gt; passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==&gt; passed

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==&gt; passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==&gt; passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 8: Check that Solver is immutable by comparing the results of two calls
        each to moves(), isSolvable(), and solution(). The results of these
        two consecutive calls must match.
==&gt; passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==&gt; passed


Total: 9/9 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; passed     4           248                  248
=&gt; passed     8           568                  568
=&gt; passed    12          1016                 1016
=&gt; passed    16          1592                 1592
=&gt; passed    20          2296                 2296
=&gt; passed    36          6392                 6392
=&gt; passed    72         23096                23096
=&gt; passed   120         61496                61496
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 15 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle20.txt   3     0.29      14230   (2.7x)       5172   (1.7x)       9058   (4.3x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle21.txt   3     6.94    1115039  (47.1x)     402752  (28.8x)     712287  (73.4x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle22.txt   3     2.16     447610  (33.1x)     165726  (20.8x)     281884  (50.6x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle23.txt   3     5.76    1341243  (38.4x)     491834  (23.7x)     849409  (59.9x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle24.txt   3     0.07      52004   (1.6x)      19288               32716   (2.5x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle25.txt   3     6.09    1675779  (28.1x)     621316  (17.5x)    1054463  (43.5x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle26.txt   3     1.81     271428   (5.3x)     101512   (3.4x)     169916   (8.1x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle27.txt   3     7.93    1698930  (19.2x)     643710  (11.9x)    1055220  (30.5x)

Total: 0/17 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-09-Oct 23:44:07</td></tr>
        <tr><td>Raw Score</td><td>65.37 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#1A9900">23/27 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#990000">0/17 tests passed</font>

Aggregate score: <font color="#519900">65.37%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 6.9K Oct 10 06:39 Board.java
-rw-r--r-- 1 3.7K Oct 10 06:39 Solver.java
-rw-r--r-- 1 2.8K Oct 10 06:39 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: new Board(int[][]) may expose internal representation by storing an externally mutable object into blocks  At Board.java:[line 8]
Warnings generated: 1
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 18 total tests.

Tests 6-9 and 17-18 rely upon toString() returning a board in the prescribed format.

Test 1: Test hamming() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2: Test hamming() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 4: Test manhattan() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 5: Test dimension() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==&gt; passed

Test 6: Test toString() with file inputs to ensure that it outputs boards in the correct format
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 7: Test neighbors() with file inputs to ensure that the correct neighbor board are generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 8: Test neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 9: Test twin() with file inputs to ensure that a correct twin is generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
     -  twin() doesn't return a twin
        4
         1  0  2  3 
         5  6  7  4 
         9 10 11  8 
        13 14 15 12 

  *  puzzle09.txt
  *  puzzle23.txt
     -  twin() doesn't return a twin
        3
         0  5  4 
         2  3  8 
         7  1  6 

  *  puzzle2x2-unsolvable1.txt
     -  twin() doesn't return a twin
        2
         0  1 
         2  3 

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 10: Test twin() with random N-by-N boards
  *  2-by-2
     -  twin() doesn't return a twin
        2
         0  2 
         3  1 

     -  Failed on trial 2 of 1000

  *  3-by-3
     -  twin() doesn't return a twin
        3
         1  4  0 
         5  3  6 
         7  8  2 

     -  Failed on trial 2 of 1000

  *  4-by-4
     -  twin() doesn't return a twin
        4
         9 12  2 11 
        14  4  5  8 
         7  3  0  1 
        13  6 15 10 

     -  Failed on trial 12 of 1000

  *  5-by-5
     -  twin() doesn't return a twin
        5
        13  2 21 19  0 
        16  1  4 14 20 
         7 15  3 22 12 
        18  8  9 17 24 
        10 11  5  6 23 

     -  Failed on trial 4 of 1000

  *  9-by-9
     -  twin() doesn't return a twin
        9
        61 20 50 65 76 49  3 46 60 
        15 53 42  8 38 77 23 54 75 
        45 47 78 27 64 36 28 19 73 
        72 10 80 41 39 25 14 66 59 
        30  9 48 52 57  5 11  1 71 
        29  6 63 31  7 58 68  0 43 
        17 33 74 24 32 51 67 55 21 
        69 26 34 70 16 18 22 12 40 
        35 13 44  4 79  2 56 62 37 

     -  Failed on trial 150 of 1000

  *  10-by-10
     -  twin() doesn't return a twin
        10
        68 63 12  5 73 88 66  9 72 94 
        46 54 50 87 34 18 89 20 17 36 
        90 45 74 70 21 38  2  0 64 86 
        81 35 80 98 15 48 25 79 47 82 
        75 26 83 24 85 41 53 19 58 56 
        71 29 37 60  8 23 99 62 39 91 
        97  6 78 42 96 14  7 52 13 49 
        65 51 30 55 27 32 43 92 11 44 
        28  1 69 61 95 93  4  3 10 16 
        31 67 76 40 59 77 33 84 57 22 

     -  Failed on trial 79 of 1000

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 11: Test isGoal() on file inputs
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-00.txt
  *  puzzle4x4-00.txt
==&gt; passed

Test 12: Test isGoal() on N-by-N goal boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  6-by-6
  *  100-by-100
==&gt; passed

Test 13: Check whether two Board objects can be created at the same time and still correctly function
  *   random boards of size 3-by-3 and 3-by-3
  *   random boards of size 4-by-4 and 4-by-4
  *   random boards of size 2-by-2 and 2-by-2
  *   random boards of size 3-by-3 and 4-by-4
  *   random boards of size 4-by-4 and 3-by-3
==&gt; passed

Test 14: Check equals()
  *  reflexive
     - equals() is not reflexive
       failed on trial 1 of 100000
3
 2  1  4 
 5  6  0 
 3  8  7 

  *  symmetric
  *  checks that individual entries of array are equal
     - probably compares arrays with reference equality
       failed on trial 1 of 100000
3
 2  0  1 
 4  7  6 
 8  5  3 


3
 2  0  1 
 4  7  6 
 8  5  3 

  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 15: Check that Board is immutable by changing argument 2d array after construction
         and making sure Board does not change
==&gt; passed

Test 16: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle10.txt
     -  failed after 7 calls to random methods in Board
     -  first call to student twin() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 21 20 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  last  call to student twin() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 21 20 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  twin1.equals(twin2) = false
  *  puzzle20.txt
     -  failed after 1 calls to random methods in Board
     -  first call to student twin() =
        3
         6  1  4 
         7  0  8 
         2  3  5 

     -  last  call to student twin() =
        3
         6  1  4 
         7  0  8 
         2  3  5 

     -  twin1.equals(twin2) = false
  *  puzzle30.txt
     -  failed after 1 calls to random methods in Board
     -  first call to student twin() =
        3
         8  4  7 
         1  6  5 
         3  2  0 

     -  last  call to student twin() =
        3
         8  4  7 
         1  6  5 
         3  2  0 

     -  twin1.equals(twin2) = false
  *  2-by-2
     -  failed after 1 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        2
         1  2 
         3  0 

     -  neighbor 0 in last  call to neighbors() =
        2
         1  2 
         3  0 

     -  board1.equals(board2) = false
     -  Failed on trial 1 of 100

  *  3-by-3
     -  failed after 5 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        3
         7  2  0 
         3  5  1 
         8  6  4 

     -  neighbor 0 in last  call to neighbors() =
        3
         7  2  0 
         3  5  1 
         8  6  4 

     -  board1.equals(board2) = false
     -  Failed on trial 1 of 100

  *  4-by-4
     -  failed after 1 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        4
         8  0  3  7 
        15  9 12 13 
        10  6  4  2 
        14 11  1  5 

     -  neighbor 0 in last  call to neighbors() =
        4
         8  0  3  7 
        15  9 12 13 
        10  6  4  2 
        14 11  1  5 

     -  board1.equals(board2) = false
     -  Failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 17: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed

Test 18: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed


Total: 14/18 tests passed!

================================================================

******************************************************************************
*  correctness (substituting reference Board.java)
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==&gt; passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==&gt; passed

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==&gt; passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==&gt; passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 8: Check that Solver is immutable by comparing the results of two calls
        each to moves(), isSolvable(), and solution(). The results of these
        two consecutive calls must match.
==&gt; passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==&gt; passed


Total: 9/9 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; passed     4           248                  248
=&gt; passed     8           568                  568
=&gt; passed    12          1016                 1016
=&gt; passed    16          1592                 1592
=&gt; passed    20          2296                 2296
=&gt; passed    36          6392                 6392
=&gt; passed    72         23096                23096
=&gt; passed   120         61496                61496
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 15 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle20.txt   3     0.21      14056   (2.7x)       5172   (1.7x)       8884   (4.2x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle21.txt   3     4.74    1108813  (46.8x)     402752  (28.8x)     706061  (72.7x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle22.txt   3     0.98     450416  (33.3x)     165726  (20.8x)     284690  (51.1x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle23.txt   3     0.36     225073   (6.4x)      82406   (4.0x)     142667  (10.1x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle24.txt   3     0.34      52004   (1.6x)      19288               32716   (2.5x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle25.txt   3     6.46    1669645  (28.0x)     621316  (17.5x)    1048329  (43.2x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle26.txt   3     0.44     269207   (5.3x)     101512   (3.4x)     167695   (8.0x)
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle27.txt   3     5.98    1711766  (19.3x)     643710  (11.9x)    1068056  (30.9x)
puzzle28.txt took 20.006 seconds to complete. Maximum allowed is 10 seconds. Aborting tests.
==&gt; 0/17 tests passed

Total: 0/17 tests passed!

================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-09-Oct 23:38:40</td></tr>
        <tr><td>Raw Score</td><td>31.67 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#994C00">9/27 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#990000">0/17 tests passed</font>

Aggregate score: <font color="#994600">31.67%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 6.7K Oct 10 06:33 Board.java
-rw-r--r-- 1 3.7K Oct 10 06:33 Solver.java
-rw-r--r-- 1 2.8K Oct 10 06:33 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: new Board(int[][]) may expose internal representation by storing an externally mutable object into blocks  At Board.java:[line 8]
Warnings generated: 1
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 18 total tests.

Tests 6-9 and 17-18 rely upon toString() returning a board in the prescribed format.

Test 1: Test hamming() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2: Test hamming() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
  *  puzzle00.txt
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=0 y=3
blocks[i][j]5 x=0 y=4
blocks[i][j]6 x=0 y=5
blocks[i][j]7 x=0 y=6
blocks[i][j]8 x=0 y=7
blocks[i][j]9 x=0 y=8
blocks[i][j]10 x=0 y=9
blocks[i][j]11 x=1 y=0
blocks[i][j]12 x=1 y=1
blocks[i][j]13 x=1 y=2
blocks[i][j]14 x=1 y=3
blocks[i][j]15 x=1 y=4
blocks[i][j]16 x=1 y=5
blocks[i][j]17 x=1 y=6
blocks[i][j]18 x=1 y=7
blocks[i][j]19 x=1 y=8
blocks[i][j]20 x=1 y=9
blocks[i][j]21 x=2 y=0
blocks[i][j]22 x=2 y=1
blocks[i][j]23 x=2 y=2
blocks[i][j]24 x=2 y=3
blocks[i][j]25 x=2 y=4
blocks[i][j]26 x=2 y=5
blocks[i][j]27 x=2 y=6
blocks[i][j]28 x=2 y=7
blocks[i][j]29 x=2 y=8
blocks[i][j]30 x=2 y=9
blocks[i][j]31 x=3 y=0
blocks[i][j]32 x=3 y=1
blocks[i][j]33 x=3 y=2
blocks[i][j]34 x=3 y=3
blocks[i][j]35 x=3 y=4
blocks[i][j]36 x=3 y=5
blocks[i][j]37 x=3 y=6
blocks[i][j]38 x=3 y=7
blocks[i][j]39 x=3 y=8
blocks[i][j]40 x=3 y=9
blocks[i][j]41 x=4 y=0
blocks[i][j]42 x=4 y=1
blocks[i][j]43 x=4 y=2
blocks[i][j]44 x=4 y=3
blocks[i][j]45 x=4 y=4
blocks[i][j]46 x=4 y=5
blocks[i][j]47 x=4 y=6
blocks[i][j]48 x=4 y=7
blocks[i][j]49 x=4 y=8
blocks[i][j]50 x=4 y=9
blocks[i][j]51 x=5 y=0
blocks[i][j]52 x=5 y=1
blocks[i][j]53 x=5 y=2
blocks[i][j]54 x=5 y=3
blocks[i][j]55 x=5 y=4
blocks[i][j]56 x=5 y=5
blocks[i][j]57 x=5 y=6
blocks[i][j]58 x=5 y=7
blocks[i][j]59 x=5 y=8
blocks[i][j]60 x=5 y=9
blocks[i][j]61 x=6 y=0
blocks[i][j]62 x=6 y=1
blocks[i][j]63 x=6 y=2
blocks[i][j]64 x=6 y=3
blocks[i][j]65 x=6 y=4
blocks[i][j]66 x=6 y=5
blocks[i][j]67 x=6 y=6
blocks[i][j]68 x=6 y=7
blocks[i][j]69 x=6 y=8
blocks[i][j]70 x=6 y=9
blocks[i][j]71 x=7 y=0
blocks[i][j]72 x=7 y=1
blocks[i][j]73 x=7 y=2
blocks[i][j]74 x=7 y=3
blocks[i][j]75 x=7 y=4
blocks[i][j]76 x=7 y=5
blocks[i][j]77 x=7 y=6
blocks[i][j]78 x=7 y=7
blocks[i][j]79 x=7 y=8
blocks[i][j]80 x=7 y=9
blocks[i][j]81 x=8 y=0
blocks[i][j]82 x=8 y=1
blocks[i][j]83 x=8 y=2
blocks[i][j]84 x=8 y=3
blocks[i][j]85 x=8 y=4
blocks[i][j]86 x=8 y=5
blocks[i][j]87 x=8 y=6
blocks[i][j]88 x=8 y=7
blocks[i][j]89 x=8 y=8
blocks[i][j]90 x=8 y=9
blocks[i][j]91 x=9 y=0
blocks[i][j]92 x=9 y=1
blocks[i][j]93 x=9 y=2
blocks[i][j]94 x=9 y=3
blocks[i][j]95 x=9 y=4
blocks[i][j]96 x=9 y=5
blocks[i][j]97 x=9 y=6
blocks[i][j]98 x=9 y=7
blocks[i][j]99 x=9 y=8
  *  puzzle07.txt
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
  *  puzzle17.txt
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
  *  puzzle27.txt
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
  *  puzzle2x2-unsolvable1.txt
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
==&gt; passed

Test 4: Test manhattan() with random N-by-N boards
  *  2-by-2
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
  *  3-by-3
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y
Total: 0/18 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================

******************************************************************************
*  correctness (substituting reference Board.java)
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==&gt; passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==&gt; passed

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==&gt; passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==&gt; passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 8: Check that Solver is immutable by comparing the results of two calls
        each to moves(), isSolvable(), and solution(). The results of these
        two consecutive calls must match.
==&gt; passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==&gt; passed


Total: 9/9 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; passed     4           248                  248
=&gt; passed     8           568                  568
=&gt; passed    12          1016                 1016
=&gt; passed    16          1592                 1592
=&gt; passed    20          2296                 2296
=&gt; passed    36          6392                 6392
=&gt; passed    72         23096                23096
=&gt; passed   120         61496                61496
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 15 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]5 x=1 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]8 x=2 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]7 x=2 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]8 x=2 y=1
blocks[i][j]2 x=0 y=1
blocks[i][j]3 x=0 y=2
blocks[i][j]5 x=1 y=1
blocks[i][j]7 x=2 y=0
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]1 x=0 y=0
blocks[i][j]3 x=0 y=2
blocks[i][j]7 x=2 y=0
blocks[i][j]4 x=1 y=0
blocks[i][j]6 x=1 y=2
blocks[i][j]2 x=0 y=1
blocks[i][j]5 x=1 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]8 x=2 y=1
blocks[i][j]6 x=1 y=2
blocks[
Total: 0/17 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-09-Oct 23:20:46</td></tr>
        <tr><td>Raw Score</td><td>58.15 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#359900">20/27 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#990000">0/17 tests passed</font>

Aggregate score: <font color="#6E9900">58.15%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 6.4K Oct 10 06:15 Board.java
-rw-r--r-- 1 3.7K Oct 10 06:15 Solver.java
-rw-r--r-- 1 2.7K Oct 10 06:15 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
M V EI_EXPOSE_REP2 EI2: new Board(int[][]) may expose internal representation by storing an externally mutable object into blocks  At Board.java:[line 8]
Warnings generated: 1
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 18 total tests.

Tests 6-9 and 17-18 rely upon toString() returning a board in the prescribed format.

Test 1: Test hamming() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2: Test hamming() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
     -  student   manhattan() = 9
     -  reference manhattan() = 0
10
 1  2  3  4  5  6  7  8  9 10 
11 12 13 14 15 16 17 18 19 20 
21 22 23 24 25 26 27 28 29 30 
31 32 33 34 35 36 37 38 39 40 
41 42 43 44 45 46 47 48 49 50 
51 52 53 54 55 56 57 58 59 60 
61 62 63 64 65 66 67 68 69 70 
71 72 73 74 75 76 77 78 79 80 
81 82 83 84 85 86 87 88 89 90 
91 92 93 94 95 96 97 98 99  0 

  *  puzzle07.txt
     -  student   manhattan() = 9
     -  reference manhattan() = 7
3
 1  2  3 
 0  7  6 
 5  4  8 

  *  puzzle17.txt
     -  student   manhattan() = 11
     -  reference manhattan() = 13
3
 5  1  8 
 2  7  3 
 4  0  6 

  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
     -  student   manhattan() = 2
     -  reference manhattan() = 3
2
 1  0 
 2  3 

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 4: Test manhattan() with random N-by-N boards
  *  2-by-2
     -  student   manhattan() = 1
     -  reference manhattan() = 0
2
 1  2 
 3  0 

     -  Failed on trial 1 of 1000

  *  3-by-3
     -  student   manhattan() = 16
     -  reference manhattan() = 14
3
 7  3  4 
 6  5  1 
 8  2  0 

     -  Failed on trial 1 of 1000

  *  4-by-4
     -  student   manhattan() = 38
     -  reference manhattan() = 39
4
14  5 10 13 
12  2  7  3 
 9 11  8  0 
 6  4 15  1 

     -  Failed on trial 1 of 1000

  *  5-by-5
     -  student   manhattan() = 75
     -  reference manhattan() = 77
5
 7 16 15  0 17 
23  6 19 12  9 
 4  3 10  5  1 
11 13 24 22  8 
 2 20 21 18 14 

     -  Failed on trial 1 of 1000

  *  9-by-9
     -  student   manhattan() = 422
     -  reference manhattan() = 424
9
27 10 18 24  7 22 21 23 73 
15  1 20  5  8 25 39 12 65 
57 62 19 52 68 11 17 44 29 
48 31 75 53 16 60  6 14 63 
36  3  4 32 79 26 64 30 33 
61 70 69  9 43 13 77 76 80 
59 67  2 54 41 50 38 58 71 
74 45 78 42 46 35 49 28 55 
47 40 37 72 51 66  0 56 34 

     -  Failed on trial 1 of 1000

  *  10-by-10
     -  student   manhattan() = 651
     -  reference manhattan() = 650
10
23 51 48 93 86 25 96 80 43 46 
49 35 30  5 57 19 32 62 70 68 
42 45  9 92 84 50 95 41 26 53 
40 37 29 72 85 67 91 55  4 59 
 1 56 82 64 76 52  2 87 33  7 
28 88 78 16 36 39 22 81 97 65 
83 73 74 99 66 60 63 21 38 18 
 8  3 14 44 71 75 20 58 98 89 
12 34  0 10 54 27 15 13 61 17 
31 79 11 77 94 90  6 47 69 24 

     -  Failed on trial 1 of 1000

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5: Test dimension() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==&gt; passed

Test 6: Test toString() with file inputs to ensure that it outputs boards in the correct format
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 7: Test neighbors() with file inputs to ensure that the correct neighbor board are generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 8: Test neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 9: Test twin() with file inputs to ensure that a correct twin is generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
     -  twin() doesn't return a twin
        2
         0  1 
         2  3 

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 10: Test twin() with random N-by-N boards
  *  2-by-2
     -  twin() doesn't return a twin
        2
         0  2 
         3  1 

     -  Failed on trial 1 of 1000

  *  3-by-3
     -  twin() doesn't return a twin
        3
         7  1  2 
         0  4  8 
         3  6  5 

     -  Failed on trial 2 of 1000

  *  4-by-4
     -  twin() doesn't return a twin
        4
         0  7 10 13 
         9 12  6  8 
         1  4  3  5 
        11  2 15 14 

     -  Failed on trial 10 of 1000

  *  5-by-5
     -  twin() doesn't return a twin
        5
        21  1 19 20  2 
        24  7 13 11 18 
         6  0 15 14  8 
         5 10 17 22  9 
         3 12  4 23 16 

     -  Failed on trial 39 of 1000

  *  9-by-9
     -  twin() doesn't return a twin
        9
        22 65 47 74 15 49  5 64 19 
        57 26 29 20 28 34 10 45 35 
        24  4 59  2 31 33 69 14 40 
        25 17 30  7 32 71 67 55 43 
        46 48 18  6  0 54 60 53 52 
        77 80 73 38 39 42 50 37 76 
        36 56  3 11  8 72 51 12 61 
        13 16 78 62 27 68  9 23 63 
        75 70 66 21 79  1 44 41 58 

     -  Failed on trial 49 of 1000

  *  10-by-10
     -  twin() doesn't return a twin
        10
        23 47 14 17 84 88 75  8 49 55 
        10 46 19 36 67 74 39  4 24 52 
        72 71 42  0 57 96 69 45 29  3 
        58 82 66 15 12  5 31 43 48 60 
        34  7 11 79 98 95 64  6 26 40 
        41 16 53 51 38 44 54 78  9 76 
        90 32 50 92 22 56 61 93 25  1 
        35  2 13 37 94 85 62 27 87 89 
        33 81 63 65 86 70 97 59 80 18 
        91 73 20 21 68 30 28 77 83 99 

     -  Failed on trial 11 of 1000

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 11: Test isGoal() on file inputs
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-00.txt
  *  puzzle4x4-00.txt
==&gt; passed

Test 12: Test isGoal() on N-by-N goal boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  6-by-6
  *  100-by-100
==&gt; passed

Test 13: Check whether two Board objects can be created at the same time and still correctly function
  *   random boards of size 3-by-3 and 3-by-3
  *   random boards of size 4-by-4 and 4-by-4
  *   random boards of size 2-by-2 and 2-by-2
  *   random boards of size 3-by-3 and 4-by-4
  *   random boards of size 4-by-4 and 3-by-3
==&gt; passed

Test 14: Check equals()
  *  reflexive
     - equals() is not reflexive
       failed on trial 1 of 100000
3
 8  4  2 
 5  0  1 
 6  7  3 

  *  symmetric
  *  checks that individual entries of array are equal
     - probably compares arrays with reference equality
       failed on trial 1 of 100000
3
 5  7  3 
 1  4  2 
 0  8  6 


3
 5  7  3 
 1  4  2 
 0  8  6 

  *  argument is object of type String
  *  argument is object of type Object
  *  argument is null
  *  argument is Board of different dimension
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 15: Check that Board is immutable by changing argument 2d array after construction
         and making sure Board does not change
==&gt; passed

Test 16: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle10.txt
     -  failed after 4 calls to random methods in Board
     -  first call to student twin() =
        9
         1  2  3  4  5  6  7  8  9 
        11 10 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  last  call to student twin() =
        9
         1  2  3  4  5  6  7  8  9 
        11 10 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  twin1.equals(twin2) = false
  *  puzzle20.txt
     -  failed after 1 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        3
         1  0  4 
         7  6  8 
         2  3  5 

     -  neighbor 0 in last  call to neighbors() =
        3
         1  0  4 
         7  6  8 
         2  3  5 

     -  board1.equals(board2) = false
  *  puzzle30.txt
     -  failed after 7 calls to random methods in Board
     -  first call to student twin() =
        3
         4  8  7 
         1  5  6 
         3  2  0 

     -  last  call to student twin() =
        3
         4  8  7 
         1  5  6 
         3  2  0 

     -  twin1.equals(twin2) = false
  *  2-by-2
     -  failed after 4 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        2
         1  0 
         3  2 

     -  neighbor 0 in last  call to neighbors() =
        2
         1  0 
         3  2 

     -  board1.equals(board2) = false
     -  Failed on trial 1 of 100

  *  3-by-3
     -  failed after 9 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        3
         3  7  4 
         8  0  6 
         2  1  5 

     -  neighbor 0 in last  call to neighbors() =
        3
         3  7  4 
         8  0  6 
         2  1  5 

     -  board1.equals(board2) = false
     -  Failed on trial 1 of 100

  *  4-by-4
     -  failed after 2 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        4
         0  5  8  2 
        14  1  6 15 
         3 10  9  4 
        12 13 11  7 

     -  neighbor 0 in last  call to neighbors() =
        4
         0  5  8  2 
        14  1  6 15 
         3 10  9  4 
        12 13 11  7 

     -  board1.equals(board2) = false
     -  Failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 17: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed

Test 18: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
     -  student   manhattan() = 12
     -  reference manhattan() = 3
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78  0 80 
        81 82 83 84 85 86 87 88 79 90 
        91 92 93 94 95 96 97 98 89 99 

  * 13th neighbor of puzzle2x2-unsolvable1.txt
     -  student   manhattan() = 3
     -  reference manhattan() = 4
        2
         1  3 
         2  0 

==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 11/18 tests passed!

================================================================

******************************************************************************
*  correctness (substituting reference Board.java)
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==&gt; passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==&gt; passed

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==&gt; passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==&gt; passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 8: Check that Solver is immutable by comparing the results of two calls
        each to moves(), isSolvable(), and solution(). The results of these
        two consecutive calls must match.
==&gt; passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==&gt; passed


Total: 9/9 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; passed     4           248                  248
=&gt; passed     8           568                  568
=&gt; passed    12          1016                 1016
=&gt; passed    16          1592                 1592
=&gt; passed    20          2296                 2296
=&gt; passed    36          6392                 6392
=&gt; passed    72         23096                23096
=&gt; passed   120         61496                61496
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 15 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle20.txt   3     2.65     354586  (67.7x)     132796  (42.6x)     221790 (104.4x)

Total: 0/17 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================



</pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-09-Oct 23:18:36</td></tr>
        <tr><td>Raw Score</td><td>0.00 / 100.00</td></tr>
                <tr><td>Feedback</td><td><pre>Compilation:  <font color="#009900">PASSED</font>

API:          <font color="#990000">FAILED</font>
<pre>Board:<p>

The following methods should be removed or made private:
  *  public int hashCode()


</p></pre></pre></td></tr>
    </tbody>
</table>


<table class="table table-condensed table-bordered table-striped">
    <thead>
        <tr>
            <th colspan="3">Submission</th>
        </tr>
    </thead>
    <tbody>
        <tr><td>Submission time</td><td>Thu-09-Oct 23:04:25</td></tr>
        <tr><td>Raw Score</td><td>55.74 / 100.00</td></tr>
                <tr><td>Feedback</td><td>See the <a href="https://class.coursera.org/algs4partI-006/wiki/view?page=Assessments">Assessment Guide</a> for information on how to read this report. <h2>
Assessment Summary</h2>
<pre>Compilation:  <font color="#009900">PASSED</font>
Style:        <font color="#009900">PASSED</font>
Findbugs:     <font color="#990000">Potential bugs found.</font>
API:          <font color="#009900">PASSED</font>

Correctness:  <font color="#409900">19/27 tests passed</font>
Memory:       <font color="#009900">8/8 tests passed</font>
Timing:       <font color="#990000">0/17 tests passed</font>

Aggregate score: <font color="#799900">55.74%</font> [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]</pre><h2>


Assessment Details
</h2>
<pre>The following files were submitted:
----------------------------------
total 16K
-rw-r--r-- 1 6.1K Oct 10 06:00 Board.java
-rw-r--r-- 1 3.7K Oct 10 06:00 Solver.java
-rw-r--r-- 1 2.7K Oct 10 06:00 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac Board.java
*-----------------------------------------------------------
================================================================

% javac Solver.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
M B NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT NP: Board.equals(Object) does not check for null argument  At Board.java:[lines 126-146]
M B BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS BC: Equals method for Board assumes the argument is of type Board  At Board.java:[line 129]
M V EI_EXPOSE_REP2 EI2: new Board(int[][]) may expose internal representation by storing an externally mutable object into blocks  At Board.java:[line 8]
Warnings generated: 3
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


******************************************************************************
*  correctness
******************************************************************************

Testing methods in Board
*-----------------------------------------------------------
Running 18 total tests.

Tests 6-9 and 17-18 rely upon toString() returning a board in the prescribed format.

Test 1: Test hamming() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle07.txt
  *  puzzle17.txt
  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 2: Test hamming() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 3: Test manhattan() with file inputs
  *  puzzle04.txt
  *  puzzle00.txt
     -  student   manhattan() = 9
     -  reference manhattan() = 0
10
 1  2  3  4  5  6  7  8  9 10 
11 12 13 14 15 16 17 18 19 20 
21 22 23 24 25 26 27 28 29 30 
31 32 33 34 35 36 37 38 39 40 
41 42 43 44 45 46 47 48 49 50 
51 52 53 54 55 56 57 58 59 60 
61 62 63 64 65 66 67 68 69 70 
71 72 73 74 75 76 77 78 79 80 
81 82 83 84 85 86 87 88 89 90 
91 92 93 94 95 96 97 98 99  0 

  *  puzzle07.txt
     -  student   manhattan() = 9
     -  reference manhattan() = 7
3
 1  2  3 
 0  7  6 
 5  4  8 

  *  puzzle17.txt
     -  student   manhattan() = 11
     -  reference manhattan() = 13
3
 5  1  8 
 2  7  3 
 4  0  6 

  *  puzzle27.txt
  *  puzzle2x2-unsolvable1.txt
     -  student   manhattan() = 2
     -  reference manhattan() = 3
2
 1  0 
 2  3 

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 4: Test manhattan() with random N-by-N boards
  *  2-by-2
     -  student   manhattan() = 4
     -  reference manhattan() = 3
2
 2  1 
 0  3 

     -  Failed on trial 1 of 1000

  *  3-by-3
     -  student   manhattan() = 12
     -  reference manhattan() = 14
3
 8  4  0 
 3  1  2 
 7  5  6 

     -  Failed on trial 5 of 1000

  *  4-by-4
     -  student   manhattan() = 31
     -  reference manhattan() = 32
4
 7  4  1  5 
 9  0  2 11 
 6  3 15  8 
12 14 13 10 

     -  Failed on trial 1 of 1000

  *  5-by-5
     -  student   manhattan() = 72
     -  reference manhattan() = 74
5
10  1  0 24  3 
 5 17 13 23 22 
14 11  7  4 21 
 6 18 12 16 15 
 8  9 19 20  2 

     -  Failed on trial 1 of 1000

  *  9-by-9
     -  student   manhattan() = 484
     -  reference manhattan() = 488
9
60 20 25 71 14 23 43 16  6 
40 34 55 79 21 50 56 66 63 
73 59 41 57 70 80 11 33 49 
31 52 17  3 65 26 53 77 35 
72 47 78 22 51 12 74 42 28 
44 48 19 68 69 30 27 58  4 
 7 75 37  5  8 10 46 67  0 
13 18  2 62 38 24 29 15 45 
32  9 61 64 76 39 54  1 36 

     -  Failed on trial 1 of 1000

  *  10-by-10
     -  student   manhattan() = 619
     -  reference manhattan() = 624
10
35 52 11 92 58 27 28 59 37 32 
44 13 16  7 87 48 75 39 18 83 
43 96 65 88 41 67 47 66 93 62 
76 51 19 34 36 90 74 24  3 79 
15  1 85 86  6  5 22 91 38 21 
82 55 45 69 49  8  2 60 40 29 
63 95 84 42 31 68 94 53 98 10 
99 89 17 33 23 14 71 78 72 81 
64 77 57 73  4  9  0 80 26 50 
70 56 46 20 25 61 54 30 12 97 

     -  Failed on trial 1 of 1000

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 5: Test dimension() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
==&gt; passed

Test 6: Test toString() with file inputs to ensure that it outputs boards in the correct format
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 7: Test neighbors() with file inputs to ensure that the correct neighbor board are generated
  *  puzzle04.txt
  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
==&gt; passed

Test 8: Test neighbors() with random N-by-N boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  9-by-9
  *  10-by-10
==&gt; passed

Test 9: Test twin() with file inputs to ensure that a correct twin is generated
  *  puzzle04.txt
     -  twin() doesn't return a twin
        3
         1  0  3 
         4  2  5 
         7  8  6 

  *  puzzle00.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
     -  twin() doesn't return a twin
        2
         0  1 
         2  3 

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 10: Test twin() with random N-by-N boards
  *  2-by-2
     -  twin() doesn't return a twin
        2
         3  0 
         1  2 

     -  Failed on trial 3 of 1000

  *  3-by-3
     -  twin() doesn't return a twin
        3
         3  1  0 
         8  4  7 
         6  2  5 

     -  Failed on trial 5 of 1000

  *  4-by-4
     -  twin() doesn't return a twin
        4
        14  5  6 15 
        13  2  0  1 
         8 12 11  3 
         7 10  9  4 

     -  Failed on trial 5 of 1000

  *  5-by-5
     -  twin() doesn't return a twin
        5
        24  2 22 20 23 
         4 18  7  6  8 
        16 11  0 19 17 
        12  5 15  9 10 
         3 13 21  1 14 

     -  Failed on trial 4 of 1000

  *  9-by-9
     -  twin() doesn't return a twin
        9
        75 64 53 10 77  8 62 30 12 
        59 24  7 63 36 31 35 45 54 
        23 25 21 20 74 65 13 72 80 
        16 28  4 27 57 38  1 55 71 
        49 69  3 60 14  6  9  5 70 
        76 56 34 48 50 33 18 73 22 
        78 41 15 43 44  0 29 39 26 
        58  2 66 47 61 19 40 32 67 
        11 17 68 51 46 42 79 52 37 

     -  Failed on trial 32 of 1000

  *  10-by-10
     -  twin() doesn't return a twin
        10
        56 49 33  9 72  7 84 51 12 22 
        59 93 57 58 23 46 25 64 80 21 
        95 86 70 75 20 40  5 91 83 28 
        24 90  2 55 43 60 18 65 77 62 
        10 53 42 98 11 48 89  1 99 96 
        67 79 37 63 38 74 92 47 29  4 
        69 87 27 85 41 36 82 14 94 73 
        54 78 31 52 35 50 68 71 44 61 
        26 66  0 45  3 32 76 81 19 88 
        30 16 34  8 39 17 97 13  6 15 

     -  Failed on trial 8 of 1000

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 11: Test isGoal() on file inputs
  *  puzzle00.txt
  *  puzzle04.txt
  *  puzzle16.txt
  *  puzzle06.txt
  *  puzzle09.txt
  *  puzzle23.txt
  *  puzzle2x2-unsolvable1.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-00.txt
  *  puzzle4x4-00.txt
==&gt; passed

Test 12: Test isGoal() on N-by-N goal boards
  *  2-by-2
  *  3-by-3
  *  4-by-4
  *  5-by-5
  *  6-by-6
  *  100-by-100
==&gt; passed

Test 13: Check whether two Board objects can be created at the same time and still correctly function
  *   random boards of size 3-by-3 and 3-by-3
  *   random boards of size 4-by-4 and 4-by-4
  *   random boards of size 2-by-2 and 2-by-2
  *   random boards of size 3-by-3 and 4-by-4
  *   random boards of size 4-by-4 and 3-by-3
==&gt; passed

Test 14: Check equals()
  *  reflexive
     - equals() is not reflexive
       failed on trial 1 of 100000
3
 4  2  6 
 7  5  1 
 3  8  0 

  *  symmetric
  *  checks that individual entries of array are equal
     - probably compares arrays with reference equality
       failed on trial 1 of 100000
3
 6  7  4 
 2  8  0 
 1  3  5 


3
 6  7  4 
 2  8  0 
 1  3  5 

  *  argument is object of type String
     java.lang.ClassCastException: java.lang.String cannot be cast to Board
     Board.equals(Board.java:129)
     TestBoard.test14(TestBoard.java:794)
     TestBoard.main(TestBoard.java:1229)

     - cannot check for equality with a String object
  *  argument is object of type Object
  *  argument is null
     java.lang.NullPointerException
     Board.equals(Board.java:127)
     TestBoard.test14(TestBoard.java:829)
     TestBoard.main(TestBoard.java:1229)

     - fails when argument is null
  *  argument is Board of different dimension
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 15: Check that Board is immutable by changing argument 2d array after construction
         and making sure Board does not change
==&gt; passed

Test 16: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  *  puzzle10.txt
     -  failed after 2 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55  0 57 58 59 60 61 62 63 
        64 56 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  neighbor 0 in last  call to neighbors() =
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55  0 57 58 59 60 61 62 63 
        64 56 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

     -  board1.equals(board2) = false
  *  puzzle20.txt
     -  failed after 1 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        3
         1  0  4 
         7  6  8 
         2  3  5 

     -  neighbor 0 in last  call to neighbors() =
        3
         1  0  4 
         7  6  8 
         2  3  5 

     -  board1.equals(board2) = false
  *  puzzle30.txt
     -  failed after 6 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        3
         8  4  7 
         1  5  0 
         3  2  6 

     -  neighbor 0 in last  call to neighbors() =
        3
         8  4  7 
         1  5  0 
         3  2  6 

     -  board1.equals(board2) = false
  *  2-by-2
     -  failed after 1 calls to random methods in Board
     -  first call to student twin() =
        2
         1  2 
         0  3 

     -  last  call to student twin() =
        2
         1  2 
         0  3 

     -  twin1.equals(twin2) = false
     -  Failed on trial 1 of 100

  *  3-by-3
     -  failed after 1 calls to random methods in Board
     -  neighbor 0 in first call to neighbors() =
        3
         0  2  4 
         1  6  7 
         5  3  8 

     -  neighbor 0 in last  call to neighbors() =
        3
         0  2  4 
         1  6  7 
         5  3  8 

     -  board1.equals(board2) = false
     -  Failed on trial 1 of 100

  *  4-by-4
     -  failed after 3 calls to random methods in Board
     -  first call to student twin() =
        4
        10  3  2  7 
        14 12  5  6 
        11  0  8  4 
        13  1 15  9 

     -  last  call to student twin() =
        4
        10  3  2  7 
        14 12  5  6 
        11  0  8  4 
        13  1 15  9 

     -  twin1.equals(twin2) = false
     -  Failed on trial 1 of 100

==&gt; <font color="#990000"><b>FAILED</b></font>

Test 17: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==&gt; passed

Test 18: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
     -  student   manhattan() = 12
     -  reference manhattan() = 3
        10
         1  2  3  4  5  6  7  8  9 10 
        11 12 13 14 15 16 17 18 19 20 
        21 22 23 24 25 26 27 28 29 30 
        31 32 33 34 35 36 37 38 39 40 
        41 42 43 44 45 46 47 48 49 50 
        51 52 53 54 55 56 57 58 59 60 
        61 62 63 64 65 66 67 68 69 70 
        71 72 73 74 75 76 77 78 79 80 
        81 82 83 84 85 86 87 88 89 90 
        91 92 93 94 95 96  0 97 98 99 

  * 13th neighbor of puzzle2x2-unsolvable1.txt
     -  student   manhattan() = 3
     -  reference manhattan() = 2
        2
         0  2 
         3  1 

==&gt; <font color="#990000"><b>FAILED</b></font>


Total: 11/18 tests passed!

================================================================

******************************************************************************
*  correctness (substituting reference Board.java)
******************************************************************************

Testing methods in Solver
*-----------------------------------------------------------
Running 9 total tests.

Test 1: Call moves() with file inputs to ensure that Solver solves the puzzle in the correct minimum number of moves
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle09.txt
  *  puzzle10.txt
  *  puzzle11.txt
  *  puzzle12.txt
  *  puzzle13.txt
==&gt; passed

Test 2: Call solution() with file inputs to ensure that the correct sequence of moves is followed
  *  puzzle00.txt
  *  puzzle01.txt
  *  puzzle02.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle05.txt
  *  puzzle06.txt
  *  puzzle07.txt
  *  puzzle08.txt
  *  puzzle10.txt
  *  puzzle15.txt
==&gt; passed

Test 3: Create multiple Solver objects at the same time and still correctly function
  *  puzzle04.txt and puzzle04.txt
  *  puzzle00.txt and puzzle04.txt
  *  puzzle04.txt and puzzle00.txt
==&gt; passed

Test 4: Call isSolvable() with file inputs
  *  puzzle01.txt
  *  puzzle03.txt
  *  puzzle04.txt
  *  puzzle17.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 5: Call isSolvable() on random 2-by-2 puzzles
  *  2-by-2
==&gt; passed

Test 6: Call moves() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
  *  puzzle2x2-unsolvable2.txt
  *  puzzle3x3-unsolvable1.txt
  *  puzzle3x3-unsolvable2.txt
  *  puzzle4x4-unsolvable.txt
==&gt; passed

Test 7: Call solution() on unsolvable puzzles
  *  puzzle2x2-unsolvable1.txt
     -  student solution() does not return null
  *  puzzle2x2-unsolvable2.txt
     -  student solution() does not return null
  *  puzzle3x3-unsolvable1.txt
     -  student solution() does not return null
  *  puzzle3x3-unsolvable2.txt
     -  student solution() does not return null
  *  puzzle4x4-unsolvable.txt
     -  student solution() does not return null
==&gt; <font color="#990000"><b>FAILED</b></font>

Test 8: Check that Solver is immutable by comparing the results of two calls
        each to moves(), isSolvable(), and solution(). The results of these
        two consecutive calls must match.
==&gt; passed

Test 9: Call moves() with file inputs
  *  puzzle14.txt
  *  puzzle15.txt
  *  puzzle16.txt
  *  puzzle17.txt
  *  puzzle18.txt
  *  puzzle19.txt
  *  puzzle20.txt
  *  puzzle21.txt
  *  puzzle22.txt
  *  puzzle23.txt
  *  puzzle24.txt
  *  puzzle25.txt
  *  puzzle26.txt
  *  puzzle27.txt
  *  puzzle28.txt
  *  puzzle29.txt
  *  puzzle30.txt
  *  puzzle31.txt
==&gt; passed


Total: 8/9 tests passed!

================================================================

******************************************************************************
*  memory usage
******************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an N-by-N board

              N       student (bytes)    reference (bytes)
----------------------------------------------------------
=&gt; passed     4           248                  248
=&gt; passed     8           568                  568
=&gt; passed    12          1016                 1016
=&gt; passed    16          1592                 1592
=&gt; passed    20          2296                 2296
=&gt; passed    36          6392                 6392
=&gt; passed    72         23096                23096
=&gt; passed   120         61496                61496
==&gt; 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)
Reference memory = 4.00 N^2 + 32.00 N + 56.00  (R^2 = 1.000)

================================================================



******************************************************************************
*  timing
******************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java. Maximum allowed time per puzzle is 15 seconds.

                                                              delMin()
               filename   N    seconds    insert()          + delMax()         max PQ size
---------------------------------------------------------------------------------------------
=&gt; <font color="#990000"><b>FAILED</b></font>  puzzle20.txt   3     1.04     358634  (68.5x)     132796  (42.6x)     225838 (106.3x)

Total: 0/17 tests passed:<font color="#990000"><b>Test aborted. Ran out of time or crashed before completion.</b></font>
================================================================



</pre></td></tr>
    </tbody>
</table>

</div></div></div></div></div><div class="coursera-footer"></div></div></div></div><!--[if gte IE 8]><script>document.getElementById("coursera-loading-js").style.display = 'block';</script><![endif]-->
<!--[if lte IE 7]><script>document.getElementById("coursera-loading-nojs").style.display = 'block';
window._204 = window._204 || [];
window._gaq = window._gaq || [];

window._gaq.push(
    ['_setAccount', 'UA-28377374-1'],
    ['_setDomainName', window.location.hostname],
    ['_setAllowLinker', true],
    ['_trackPageview', window.location.pathname]);
    
window._204.push(
  ['client', 'home'],
  {key:"pageview", value:window.location.pathname});
  </script><script src="https://dw0ugk4msqulk.cloudfront.net/ccef494d48f10ded4e3e01c780610bdfd07bd8da/js/lib/204.js"></script><script src="https://ssl.google-analytics.com/ga.js"></script><![endif]-->
<!--[if !IE]> --><script>document.getElementById("coursera-loading-js").style.display = 'block';</script><!-- <![endif]-->
<script src="Assignment%20Results%20_%20Coursera_files/require.js"></script><script data-baseurl="https://dw0ugk4msqulk.cloudfront.net/ccef494d48f10ded4e3e01c780610bdfd07bd8da/" data-version="ccef494d48f10ded4e3e01c780610bdfd07bd8da" data-timestamp="1412983073290" data-debug="0" data-locale="en_US" id="_require">if(document.getElementById("coursera-loading-js").style.display == 'block') {
  (function(el) {
     require.config({
       //enforceDefine: true,
       waitSeconds: 75,
       baseUrl: el.getAttribute("data-baseurl"),
       urlArgs: el.getAttribute("data-debug") == "1" ? "v=" + el.getAttribute("data-timestamp") : "",
       shim: {
          'underscore': {
             exports: '_'
          },
          'backbone': {
             deps: ['underscore', 'jquery'],
             exports: 'Backbone',
             init: function(_, $) {
               Backbone.$ = $;
               return Backbone;
             }
          },
          'pages/hg/thirdparty/js/backbone.marionette': {
            deps: ["backbone"]
          },
          'pages/hg/thirdparty/js/webshims/polyfiller': {
            deps: ["jquery"]
          },
          'pages/hg/thirdparty/js/webshims/extras/mousepress': {
            deps: ["jquery", "pages/hg/thirdparty/js/webshims/polyfiller"]
          },
          'pages/hg/thirdparty/js/jquery.throttle': {
            deps: ["jquery"]
          },
          'js/lib/jquery.linkify': {
            deps: ["jquery"]
          },
          'pages/hg/thirdparty/js/js/bootstrap/alert': {
            deps: ["jquery", "pages/hg/thirdparty/js/bootstrap/transition"]
          },
          'spark/core/js/jquery_ui': {
            deps: ["jquery"]
          },
          'spark/core/js/jquery.history': {
            deps: ["jquery"]
          },
          'js/lib/bootstrap.tooltip': {
            deps: ["jquery"]
          },
          'pages/hg/thirdparty/js/bootstrap/transition': {
            deps: ["jquery"]
          },
          'pages/hg/thirdparty/js/bootstrap/tab': {
            deps: ["jquery"]
          },
          'bundles/videojs/lib/video.4.3.0': {
            exports: 'vjs'
          }
       },
       paths: {
          "jquery":                         "pages/spark/jquery",
          "underscore":                     "js/core/underscore.1.5.2",
          "backbone":                       "js/core/backbone.1.1.0",
          "backbone.relational":            "js/lib/backbone.relational.0.8.6",
          "i18n":                           "js/lib/i18n._t",
          "css":                            "js/vendor/require.css.v0-1-2",
          "memoize":                        "js/lib/require.memoize.v0-0-1",
          "pages/spark/models/user.json":   "empty:",
          "pages/spark/models/course.json": "empty:",
          "pages/spark/models/navbar.json": "empty:"
       },
       callback: function() {
                    require(["pages/spark/routes"]);
                },
       config: {
         i18n: {
           locale: (window.localStorage ? localStorage.getItem('locale') : '') || el.getAttribute('data-locale')
         }
       }
     });
  })(document.getElementById("_require"));
}
</script><script>define("pages/spark/models/user.json", [], function(){
      return JSON.parse("{\"id\":1350958,\"email_address\":\"sudarshan.sarolkar@gmail.com\",\"full_name\":\"Sudarshan S\",\"locale\":\"en_US\",\"timezone\":\"America\\\/Los_Angeles\",\"access_group_id\":\"4\",\"registration_time\":\"1410627231\",\"last_access_time\":\"1412953859\",\"last_access_ip\":\"204.14.239.210\",\"signature_track_register_time\":\"0\",\"email_announcement\":\"1\",\"email_forum\":\"1\",\"in_signature_track\":\"0\",\"wishes_proctored_exam\":\"0\",\"first_name\":\"Sudarshan\",\"permissions\":[\"default\",\"allow_site_access\"],\"group\":\"Student\",\"anonymous\":false,\"forum_title\":\"Student\",\"signature_track_state\":1,\"verified_quizzes\":[],\"submitted_quizzes\":[],\"scheduled_proctored_exam\":null,\"last_chance_modal\":null,\"flexjoin_last_chance_modal\":null}");
  });
define("pages/spark/models/course.json", [], function(){
      return JSON.parse("{\"id\":972715,\"isPrivate\":false,\"type\":\"public\",\"name\":\"Algorithms, Part I\",\"instructor\":\"Kevin Wayne, Robert Sedgewick\",\"sessionName\":\"algs4partI-006\",\"externalBaseURL\":\"https:\\\/\\\/www.coursera.org\\\/\",\"shortname\":\"algs4partI\",\"host\":\"https:\\\/\\\/www.coursera.org\\\/\",\"assetUnversionedLink\":\"https:\\\/\\\/dw0ugk4msqulk.cloudfront.net\\\/\",\"cheggID\":\"\",\"hasLTI\":true,\"badgevilleDomain\":\"\",\"linkable\":false,\"universityShortname\":\"princeton\",\"signatureTrackStatus\":{\"signature_track_enabled\":0},\"courseURLs\":{\"log_in_link\":\"https:\\\/\\\/accounts.coursera.org\\\/signin?post_redirect=https%3A%2F%2Faccounts.coursera.org%2Fsignin%3Fuser_action%3Dclass%26course_id%3D972715%26post_redirect%3Dhttps%253A%252F%252Fclass.coursera.org%252Falgs4partI-006%252Fauth%252Fauth_redirector%253Ftype%253Dlogin%2526subtype%253Dnormal%2526visiting%253D\",\"sign_up_link\":\"https:\\\/\\\/accounts.coursera.org\\\/signup?enroll_cid=972715&enroll_sn=algs4partI&enroll_n=Algorithms, Part I\",\"view_course_info_link\":\"https:\\\/\\\/www.coursera.org\\\/course\\\/algs4partI\",\"sign_up_link_cant_enroll\":\"https:\\\/\\\/accounts.coursera.org\\\/signup?post_redirect=https%3A%2F%2Fwww.coursera.org%2Fcourse%2Falgs4partI\"},\"courseBase\":\"https:\\\/\\\/class.coursera.org\\\/algs4partI-006\\\/\",\"search\":true,\"hideWiki\":true,\"hideMeetup\":false,\"aceStartRegistrationDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceEndRegistrationDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamStartDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamEndDate\":\"Wed 31 Dec 1969  4:00 PM PST\",\"aceExamRules\":\"\",\"aceExamDuration\":\"\",\"aceBeforeExam\":false,\"aceAfterExam\":true,\"aceHours\":null,\"aceCreditType\":\"\",\"acePrice\":null,\"aceExamID\":null,\"aceEligible\":false,\"canRegisterForACE\":false,\"specialization\":null,\"supportForums\":true,\"textbooks\":\"\",\"inVideoQuizV2\":false,\"in_flexjoin\":0,\"honorCodeExtraText\":\"I will not to post solutions or partial solutions to the programming assignments publicly (e.g., in the discussion forums or in public code repositories such as GitHub).\",\"honorCodeCustomTitle\":\"\",\"honorCodeCustomButton\":\"\",\"studentAccessDisabled\":0,\"disableQQs\":false}");
  });
  define("pages/spark/models/navbar.json", [], function(){
      return JSON.parse("{\"items\":[{\"name\":\"Home\",\"icon\":\"home\",\"link_type\":\"circuit\",\"link_data\":\"class:index\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Syllabus\",\"icon\":\"wiki\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=syllabus\"},{\"name\":\"Schedule\",\"icon\":\"wiki\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=schedule\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Lectures\",\"icon\":\"lecture\",\"link_type\":\"circuit\",\"link_data\":\"lecture:index\"},{\"name\":\"Exercises\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index\"},{\"name\":\"Programming Assignments\",\"icon\":\"assignment\",\"link_type\":\"circuit\",\"link_data\":\"assignment:index\"},{\"name\":\"Job Interview Questions\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index?quiz_type=homework\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Discussion Forums\",\"icon\":\"forum\",\"link_type\":\"circuit\",\"link_data\":\"forum:index\"},{\"name\":\"Google+ Hangouts\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=ScheduleGoogleHangouts\"},{\"name\":\"Errata\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"wiki\\\/view?page=errata\"},{\"name\":\"Surveys\",\"icon\":\"quiz\",\"link_type\":\"circuit\",\"link_data\":\"quiz:index?quiz_type=survey\"},{\"name\":\"\",\"icon\":\"\",\"link_type\":\"circuit\",\"link_data\":\"\"},{\"name\":\"Booksite\",\"icon\":\"wiki\",\"link_type\":\"window_link\",\"link_data\":\"http:\\\/\\\/algs4.cs.princeton.edu\"}]}");
  });
</script><script>var coursera_enable_new_help_center = false;
</script><div class="hide confirm-navigation modal"><div class="modal-header"><h3>Confirm Navigation</h3></div><div class="modal-body"><div class="confirm-navigation-message"></div><div>Are you sure you want to leave this page?</div></div><div class="modal-footer"><button data-modal-close="data-modal-close" class="btn confirm-navigation-stay">Stay on this Page</button><button data-modal-close="data-modal-close" class="btn btn-danger confirm-navigation-leave">Leave this Page</button></div></div><div style="display: none;" class="coursera-async-message"></div></body></html>